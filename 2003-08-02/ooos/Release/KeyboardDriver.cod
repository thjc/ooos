; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	KeyboardDriver.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??0KeyboardDriver@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KeyboardISR@KeyboardDriver@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIntMask@KeyboardDriver@@CAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearIntMask@KeyboardDriver@@CAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BufferFull@KeyboardDriver@@SA_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BufferEmpty@KeyboardDriver@@SA_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KeysBuffered@KeyboardDriver@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetKey@KeyboardDriver@@SA_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?Head@KeyboardDriver@@0EC			; KeyboardDriver::Head
PUBLIC	?Tail@KeyboardDriver@@0EC			; KeyboardDriver::Tail
PUBLIC	?Full@KeyboardDriver@@0_NC			; KeyboardDriver::Full
PUBLIC	?Buffer@KeyboardDriver@@0RC_WC			; KeyboardDriver::Buffer
PUBLIC	?CharMap@KeyboardDriver@@0PA_WA			; KeyboardDriver::CharMap
_BSS	SEGMENT
?Head@KeyboardDriver@@0EC DB 01H DUP (?)		; KeyboardDriver::Head
	ALIGN	4

?Tail@KeyboardDriver@@0EC DB 01H DUP (?)		; KeyboardDriver::Tail
	ALIGN	4

?Full@KeyboardDriver@@0_NC DB 01H DUP (?)		; KeyboardDriver::Full
	ALIGN	4

?Buffer@KeyboardDriver@@0RC_WC DW 040H DUP (?)		; KeyboardDriver::Buffer
_BSS	ENDS
_DATA	SEGMENT
?CharMap@KeyboardDriver@@0PA_WA DW 00H			; KeyboardDriver::CharMap
	DW	00H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	030H
	DW	02dH
	DW	03dH
	DW	08H
	DW	09H
	DW	071H
	DW	077H
	DW	065H
	DW	072H
	DW	074H
	DW	079H
	DW	075H
	DW	069H
	DW	06fH
	DW	070H
	DW	05bH
	DW	05dH
	DW	0aH
	DW	00H
	DW	061H
	DW	073H
	DW	064H
	DW	066H
	DW	067H
	DW	068H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	03bH
	DW	027H
	DW	060H
	DW	00H
	DW	05cH
	DW	07aH
	DW	078H
	DW	063H
	DW	076H
	DW	062H
	DW	06eH
	DW	06dH
	DW	02cH
	DW	02eH
	DW	02fH
	DW	00H
	DW	00H
	DW	00H
	DW	020H
	ORG $+396
_DATA	ENDS
PUBLIC	??0KeyboardDriver@@QAE@XZ			; KeyboardDriver::KeyboardDriver
; Function compile flags: /Ogty
; File d:\my documents\projects\ooos\current\ooos\keyboarddriver.cpp
;	COMDAT ??0KeyboardDriver@@QAE@XZ
_TEXT	SEGMENT
??0KeyboardDriver@@QAE@XZ PROC NEAR			; KeyboardDriver::KeyboardDriver, COMDAT
; _this$ = ecx

; 73   : {

  00000	8b c1		 mov	 eax, ecx

; 74   : }

  00002	c3		 ret	 0
??0KeyboardDriver@@QAE@XZ ENDP				; KeyboardDriver::KeyboardDriver
_TEXT	ENDS
PUBLIC	?KeyboardISR@KeyboardDriver@@SAXXZ		; KeyboardDriver::KeyboardISR
; Function compile flags: /Ogty
;	COMDAT ?KeyboardISR@KeyboardDriver@@SAXXZ
_TEXT	SEGMENT
_KeyCode$ = -1
_Status$ = -1
?KeyboardISR@KeyboardDriver@@SAXXZ PROC NEAR		; KeyboardDriver::KeyboardISR, COMDAT

; 78   : {

  00000	51		 push	 ecx

; 79   : 	BYTE KeyCode, Status;
; 80   : 	__asm
; 81   : 	{
; 82   : 		// Read status byte from keyboard controller
; 83   : 		//MOV al, 0xD0
; 84   : 		//OUT 0x64, al
; 85   : 		
; 86   : 		IN al, 0x64

  00001	e4 64		 in	 al, 100			; 00000064H

; 87   : 		MOV Status, al

  00003	88 44 24 03	 mov	 BYTE PTR _Status$[esp+4], al

; 88   : 	}
; 89   : 	if ((Status & 1) == 1)

  00007	8a 44 24 03	 mov	 al, BYTE PTR _Status$[esp+4]
  0000b	b1 01		 mov	 cl, 1
  0000d	84 c1		 test	 al, cl
  0000f	74 62		 je	 SHORT $L320

; 90   : 	{
; 91   : 
; 92   : 		__asm 
; 93   : 		{
; 94   : 			
; 95   : 
; 96   : 			// Read KeyStroke from Keyboard Controller (Clears Interrupt flag on controller)
; 97   : 			IN al, 0x60

  00011	e4 60		 in	 al, 96			; 00000060H

; 98   : 			MOV KeyCode, al

  00013	88 44 24 03	 mov	 BYTE PTR _KeyCode$[esp+4], al

; 99   : 		}
; 100  : 		// Check if it is a make or break code
; 101  : 		// For the moment discard the break codes
; 102  : 		if (KeyCode < 128)

  00017	8a 44 24 03	 mov	 al, BYTE PTR _KeyCode$[esp+4]
  0001b	3c 80		 cmp	 al, 128			; 00000080H
  0001d	73 54		 jae	 SHORT $L320

; 103  : 		{
; 104  : 			wchar_t CharCode = CharMap[KeyCode];
; 105  : 			// add new charater
; 106  : 			if (!Full)

  0001f	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?Full@KeyboardDriver@@0_NC ; KeyboardDriver::Full
  00025	84 d2		 test	 dl, dl
  00027	0f b6 c0	 movzx	 eax, al
  0002a	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?CharMap@KeyboardDriver@@0PA_WA[eax*2]
  00032	75 3f		 jne	 SHORT $L320

; 107  : 			{
; 108  : 				Buffer[Tail] = CharCode;

  00034	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?Tail@KeyboardDriver@@0EC ; KeyboardDriver::Tail
  0003b	66 89 04 55 00
	00 00 00	 mov	 WORD PTR ?Buffer@KeyboardDriver@@0RC_WC[edx*2], ax

; 109  : 
; 110  : 				if (++Tail == BufferSize)

  00043	a0 00 00 00 00	 mov	 al, BYTE PTR ?Tail@KeyboardDriver@@0EC ; KeyboardDriver::Tail
  00048	fe c0		 inc	 al
  0004a	a2 00 00 00 00	 mov	 BYTE PTR ?Tail@KeyboardDriver@@0EC, al ; KeyboardDriver::Tail
  0004f	80 3d 00 00 00
	00 40		 cmp	 BYTE PTR ?Tail@KeyboardDriver@@0EC, 64 ; KeyboardDriver::Tail, 00000040H
  00056	75 07		 jne	 SHORT $L319

; 111  : 					Tail = 0;

  00058	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Tail@KeyboardDriver@@0EC, 0 ; KeyboardDriver::Tail
$L319:

; 112  : 				if (Tail == Head)

  0005f	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?Head@KeyboardDriver@@0EC ; KeyboardDriver::Head
  00065	38 15 00 00 00
	00		 cmp	 BYTE PTR ?Tail@KeyboardDriver@@0EC, dl ; KeyboardDriver::Tail
  0006b	75 06		 jne	 SHORT $L320

; 113  : 					Full = true;

  0006d	88 0d 00 00 00
	00		 mov	 BYTE PTR ?Full@KeyboardDriver@@0_NC, cl ; KeyboardDriver::Full
$L320:

; 114  : 			}
; 115  : 		}
; 116  : 	}
; 117  : }

  00073	59		 pop	 ecx
  00074	c3		 ret	 0
?KeyboardISR@KeyboardDriver@@SAXXZ ENDP			; KeyboardDriver::KeyboardISR
_TEXT	ENDS
PUBLIC	?SetIntMask@KeyboardDriver@@CAXXZ		; KeyboardDriver::SetIntMask
; Function compile flags: /Ogty
;	COMDAT ?SetIntMask@KeyboardDriver@@CAXXZ
_TEXT	SEGMENT
?SetIntMask@KeyboardDriver@@CAXXZ PROC NEAR		; KeyboardDriver::SetIntMask, COMDAT

; 123  : 	__asm 
; 124  : 	{
; 125  : 		IN al, IO_PIC1 + 1

  00000	e4 21		 in	 al, 33			; 00000021H

; 126  : 		OR al, PIC_KEY_MSK

  00002	0c 02		 or	 al, 2

; 127  : 		OUT IO_PIC1 + 1, al

  00004	e6 21		 out	 33, al			; 00000021H

; 128  : 	}
; 129  : }

  00006	c3		 ret	 0
?SetIntMask@KeyboardDriver@@CAXXZ ENDP			; KeyboardDriver::SetIntMask
_TEXT	ENDS
PUBLIC	?ClearIntMask@KeyboardDriver@@CAXXZ		; KeyboardDriver::ClearIntMask
; Function compile flags: /Ogty
;	COMDAT ?ClearIntMask@KeyboardDriver@@CAXXZ
_TEXT	SEGMENT
?ClearIntMask@KeyboardDriver@@CAXXZ PROC NEAR		; KeyboardDriver::ClearIntMask, COMDAT

; 134  : 	__asm 
; 135  : 	{
; 136  : 		IN al, IO_PIC1 + 1

  00000	e4 21		 in	 al, 33			; 00000021H

; 137  : 		AND al, ~PIC_KEY_MSK

  00002	24 fd		 and	 al, -3			; fffffffdH

; 138  : 		OUT IO_PIC1 + 1, al

  00004	e6 21		 out	 33, al			; 00000021H

; 139  : 	}
; 140  : }

  00006	c3		 ret	 0
?ClearIntMask@KeyboardDriver@@CAXXZ ENDP		; KeyboardDriver::ClearIntMask
_TEXT	ENDS
PUBLIC	?BufferFull@KeyboardDriver@@SA_NXZ		; KeyboardDriver::BufferFull
; Function compile flags: /Ogty
;	COMDAT ?BufferFull@KeyboardDriver@@SA_NXZ
_TEXT	SEGMENT
?BufferFull@KeyboardDriver@@SA_NXZ PROC NEAR		; KeyboardDriver::BufferFull, COMDAT

; 145  : 	bool Temp;
; 146  : 	KeyboardDriver::SetIntMask();

  00000	e8 00 00 00 00	 call	 ?SetIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::SetIntMask

; 147  : 	//Temp = (Head == Tail-1) || (Head == 0 && Tail == BufferSize);
; 148  : 	Temp = Full;

  00005	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?Full@KeyboardDriver@@0_NC ; KeyboardDriver::Full

; 149  : 	KeyboardDriver::ClearIntMask();

  0000b	e8 00 00 00 00	 call	 ?ClearIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::ClearIntMask

; 150  : 	return Temp;

  00010	8a c1		 mov	 al, cl

; 151  : 	
; 152  : }

  00012	c3		 ret	 0
?BufferFull@KeyboardDriver@@SA_NXZ ENDP			; KeyboardDriver::BufferFull
_TEXT	ENDS
PUBLIC	?BufferEmpty@KeyboardDriver@@SA_NXZ		; KeyboardDriver::BufferEmpty
; Function compile flags: /Ogty
;	COMDAT ?BufferEmpty@KeyboardDriver@@SA_NXZ
_TEXT	SEGMENT
?BufferEmpty@KeyboardDriver@@SA_NXZ PROC NEAR		; KeyboardDriver::BufferEmpty, COMDAT

; 157  : 	bool Temp;
; 158  : 	KeyboardDriver::SetIntMask();

  00000	e8 00 00 00 00	 call	 ?SetIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::SetIntMask

; 159  : 	Temp = (Head == Tail);

  00005	a0 00 00 00 00	 mov	 al, BYTE PTR ?Tail@KeyboardDriver@@0EC ; KeyboardDriver::Tail
  0000a	38 05 00 00 00
	00		 cmp	 BYTE PTR ?Head@KeyboardDriver@@0EC, al ; KeyboardDriver::Head
  00010	0f 94 c1	 sete	 cl

; 160  : 	KeyboardDriver::ClearIntMask();

  00013	e8 00 00 00 00	 call	 ?ClearIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::ClearIntMask

; 161  : 	return Temp;

  00018	8a c1		 mov	 al, cl

; 162  : }

  0001a	c3		 ret	 0
?BufferEmpty@KeyboardDriver@@SA_NXZ ENDP		; KeyboardDriver::BufferEmpty
_TEXT	ENDS
PUBLIC	?KeysBuffered@KeyboardDriver@@SAHXZ		; KeyboardDriver::KeysBuffered
; Function compile flags: /Ogty
;	COMDAT ?KeysBuffered@KeyboardDriver@@SAHXZ
_TEXT	SEGMENT
?KeysBuffered@KeyboardDriver@@SAHXZ PROC NEAR		; KeyboardDriver::KeysBuffered, COMDAT

; 166  : 	int Temp;
; 167  : 	KeyboardDriver::SetIntMask();

  00000	e8 00 00 00 00	 call	 ?SetIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::SetIntMask

; 168  : 	if (Full)

  00005	a0 00 00 00 00	 mov	 al, BYTE PTR ?Full@KeyboardDriver@@0_NC ; KeyboardDriver::Full
  0000a	84 c0		 test	 al, al
  0000c	74 0d		 je	 SHORT $L334

; 169  : 		Temp = BufferSize;

  0000e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H

; 174  : 	
; 175  : 	KeyboardDriver::ClearIntMask();

  00013	e8 00 00 00 00	 call	 ?ClearIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::ClearIntMask

; 176  : 	return Temp;

  00018	8b c1		 mov	 eax, ecx

; 177  : }

  0001a	c3		 ret	 0
$L334:

; 170  : 	else if (Head > Tail)

  0001b	a0 00 00 00 00	 mov	 al, BYTE PTR ?Tail@KeyboardDriver@@0EC ; KeyboardDriver::Tail
  00020	38 05 00 00 00
	00		 cmp	 BYTE PTR ?Head@KeyboardDriver@@0EC, al ; KeyboardDriver::Head

; 171  : 		Temp = BufferSize - (Head - Tail) + 1;

  00026	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?Tail@KeyboardDriver@@0EC ; KeyboardDriver::Tail
  0002d	76 14		 jbe	 SHORT $L336
  0002f	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?Head@KeyboardDriver@@0EC ; KeyboardDriver::Head
  00036	2b ca		 sub	 ecx, edx
  00038	83 c1 41	 add	 ecx, 65			; 00000041H

; 174  : 	
; 175  : 	KeyboardDriver::ClearIntMask();

  0003b	e8 00 00 00 00	 call	 ?ClearIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::ClearIntMask

; 176  : 	return Temp;

  00040	8b c1		 mov	 eax, ecx

; 177  : }

  00042	c3		 ret	 0
$L336:

; 172  : 	else
; 173  : 		Temp = Tail - Head;

  00043	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Head@KeyboardDriver@@0EC ; KeyboardDriver::Head
  0004a	2b c8		 sub	 ecx, eax

; 174  : 	
; 175  : 	KeyboardDriver::ClearIntMask();

  0004c	e8 00 00 00 00	 call	 ?ClearIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::ClearIntMask

; 176  : 	return Temp;

  00051	8b c1		 mov	 eax, ecx

; 177  : }

  00053	c3		 ret	 0
?KeysBuffered@KeyboardDriver@@SAHXZ ENDP		; KeyboardDriver::KeysBuffered
_TEXT	ENDS
PUBLIC	?GetKey@KeyboardDriver@@SA_WXZ			; KeyboardDriver::GetKey
; Function compile flags: /Ogty
;	COMDAT ?GetKey@KeyboardDriver@@SA_WXZ
_TEXT	SEGMENT
?GetKey@KeyboardDriver@@SA_WXZ PROC NEAR		; KeyboardDriver::GetKey, COMDAT

; 181  : 	wchar_t Temp;
; 182  : 	KeyboardDriver::SetIntMask();

  00000	e8 00 00 00 00	 call	 ?SetIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::SetIntMask

; 183  : 	// if empty return null
; 184  : 	if (BufferEmpty())

  00005	e8 00 00 00 00	 call	 ?BufferEmpty@KeyboardDriver@@SA_NXZ ; KeyboardDriver::BufferEmpty
  0000a	84 c0		 test	 al, al
  0000c	74 0b		 je	 SHORT $L341

; 185  : 		Temp = NULL;

  0000e	33 c9		 xor	 ecx, ecx

; 193  : 	}
; 194  : 
; 195  : 	KeyboardDriver::ClearIntMask();

  00010	e8 00 00 00 00	 call	 ?ClearIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::ClearIntMask

; 196  : 	return Temp;

  00015	66 8b c1	 mov	 ax, cx

; 197  : }

  00018	c3		 ret	 0
$L341:

; 186  : 	else
; 187  : 	// other wise return first chracter and increment head, adjust ofr end of buffer
; 188  : 	{
; 189  : 		Temp = Buffer[Head];

  00019	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Head@KeyboardDriver@@0EC ; KeyboardDriver::Head
  00020	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR ?Buffer@KeyboardDriver@@0RC_WC[eax*2]

; 190  : 		if (++Head == BufferSize)

  00028	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?Head@KeyboardDriver@@0EC ; KeyboardDriver::Head
  0002e	fe c2		 inc	 dl
  00030	88 15 00 00 00
	00		 mov	 BYTE PTR ?Head@KeyboardDriver@@0EC, dl ; KeyboardDriver::Head
  00036	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?Head@KeyboardDriver@@0EC ; KeyboardDriver::Head
  0003c	32 c0		 xor	 al, al
  0003e	80 fa 40	 cmp	 dl, 64			; 00000040H
  00041	75 05		 jne	 SHORT $L343

; 191  : 			Head = 0;

  00043	a2 00 00 00 00	 mov	 BYTE PTR ?Head@KeyboardDriver@@0EC, al ; KeyboardDriver::Head
$L343:

; 192  : 		Full = false;

  00048	a2 00 00 00 00	 mov	 BYTE PTR ?Full@KeyboardDriver@@0_NC, al ; KeyboardDriver::Full

; 193  : 	}
; 194  : 
; 195  : 	KeyboardDriver::ClearIntMask();

  0004d	e8 00 00 00 00	 call	 ?ClearIntMask@KeyboardDriver@@CAXXZ ; KeyboardDriver::ClearIntMask

; 196  : 	return Temp;

  00052	66 8b c1	 mov	 ax, cx

; 197  : }

  00055	c3		 ret	 0
?GetKey@KeyboardDriver@@SA_WXZ ENDP			; KeyboardDriver::GetKey
_TEXT	ENDS
END
