; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	HeapAllocation.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??0ProcessNode@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0HeapAllocation@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1HeapAllocation@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@HeapAllocation@@QAEXIPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dealloc@HeapAllocation@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0HeapAllocation@@QAE@XZ			; HeapAllocation::HeapAllocation
; Function compile flags: /Ogty
; File d:\my documents\projects\ooos\current\ooos\heapallocation.cpp
;	COMDAT ??0HeapAllocation@@QAE@XZ
_TEXT	SEGMENT
??0HeapAllocation@@QAE@XZ PROC NEAR			; HeapAllocation::HeapAllocation, COMDAT
; _this$ = ecx

; 6    : {

  00000	8b c1		 mov	 eax, ecx

; 7    : }

  00002	c3		 ret	 0
??0HeapAllocation@@QAE@XZ ENDP				; HeapAllocation::HeapAllocation
_TEXT	ENDS
PUBLIC	??1HeapAllocation@@QAE@XZ			; HeapAllocation::~HeapAllocation
; Function compile flags: /Ogty
;	COMDAT ??1HeapAllocation@@QAE@XZ
_TEXT	SEGMENT
??1HeapAllocation@@QAE@XZ PROC NEAR			; HeapAllocation::~HeapAllocation, COMDAT
; _this$ = ecx

; 11   : }

  00000	c3		 ret	 0
??1HeapAllocation@@QAE@XZ ENDP				; HeapAllocation::~HeapAllocation
_TEXT	ENDS
PUBLIC	?Alloc@HeapAllocation@@QAEXIPAV1@@Z		; HeapAllocation::Alloc
; Function compile flags: /Ogty
;	COMDAT ?Alloc@HeapAllocation@@QAEXIPAV1@@Z
_TEXT	SEGMENT
_Size$ = 8
_After$ = 12
?Alloc@HeapAllocation@@QAEXIPAV1@@Z PROC NEAR		; HeapAllocation::Alloc, COMDAT
; _this$ = ecx

; 15   : 	Next = After->Next;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _After$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 16   : 	Prev = After;
; 17   : 	AllocSize = Size;

  00008	8b 54 24 04	 mov	 edx, DWORD PTR _Size$[esp-4]
  0000c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000f	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 18   : 	SpaceSize = Prev->SpaceSize - AllocSize - sizeof(HeapAllocation);

  00012	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00015	2b c2		 sub	 eax, edx
  00017	83 e8 10	 sub	 eax, 16			; 00000010H
  0001a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 19   : 	
; 20   : 	if (Next != NULL)

  0001d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001f	85 c0		 test	 eax, eax
  00021	74 03		 je	 SHORT $L538

; 21   : 		Next->Prev = this;

  00023	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$L538:

; 22   : 	
; 23   : 	Prev->Next = this;

  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	89 0a		 mov	 DWORD PTR [edx], ecx

; 24   : 	Prev->SpaceSize = 0;

  0002b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 25   : }

  00035	c2 08 00	 ret	 8
?Alloc@HeapAllocation@@QAEXIPAV1@@Z ENDP		; HeapAllocation::Alloc
_TEXT	ENDS
PUBLIC	?Dealloc@HeapAllocation@@QAEXXZ			; HeapAllocation::Dealloc
; Function compile flags: /Ogty
;	COMDAT ?Dealloc@HeapAllocation@@QAEXXZ
_TEXT	SEGMENT
?Dealloc@HeapAllocation@@QAEXXZ PROC NEAR		; HeapAllocation::Dealloc, COMDAT
; _this$ = ecx

; 29   : 	Prev->Next = Next;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	89 10		 mov	 DWORD PTR [eax], edx

; 30   : 	Prev->SpaceSize += AllocSize + SpaceSize + sizeof(HeapAllocation);

  00007	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0000d	56		 push	 esi
  0000e	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00011	8d 54 32 10	 lea	 edx, DWORD PTR [edx+esi+16]
  00015	01 50 0c	 add	 DWORD PTR [eax+12], edx

; 31   : 
; 32   : 	if (Next != NULL)

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	85 c0		 test	 eax, eax
  0001c	5e		 pop	 esi
  0001d	74 06		 je	 SHORT $L543

; 33   : 		Next->Prev = Prev;

  0001f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00022	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$L543:

; 34   : }

  00025	c3		 ret	 0
?Dealloc@HeapAllocation@@QAEXXZ ENDP			; HeapAllocation::Dealloc
_TEXT	ENDS
END
