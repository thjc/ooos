; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	TimerDriver.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??0ProcessNode@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TimerDriver@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimerDriver@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TimerISR@TimerDriver@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?Ticks@TimerDriver@@2KC				; TimerDriver::Ticks
_BSS	SEGMENT
?Ticks@TimerDriver@@2KC DD 01H DUP (?)			; TimerDriver::Ticks
_BSS	ENDS
PUBLIC	??0TimerDriver@@QAE@XZ				; TimerDriver::TimerDriver
; Function compile flags: /Ogty
; File d:\my documents\projects\ooos\current\ooos\timerdriver.cpp
;	COMDAT ??0TimerDriver@@QAE@XZ
_TEXT	SEGMENT
??0TimerDriver@@QAE@XZ PROC NEAR			; TimerDriver::TimerDriver, COMDAT
; _this$ = ecx

; 9    : {

  00000	8b c1		 mov	 eax, ecx

; 10   : }

  00002	c3		 ret	 0
??0TimerDriver@@QAE@XZ ENDP				; TimerDriver::TimerDriver
_TEXT	ENDS
PUBLIC	??1TimerDriver@@QAE@XZ				; TimerDriver::~TimerDriver
; Function compile flags: /Ogty
;	COMDAT ??1TimerDriver@@QAE@XZ
_TEXT	SEGMENT
??1TimerDriver@@QAE@XZ PROC NEAR			; TimerDriver::~TimerDriver, COMDAT
; _this$ = ecx

; 14   : }

  00000	c3		 ret	 0
??1TimerDriver@@QAE@XZ ENDP				; TimerDriver::~TimerDriver
_TEXT	ENDS
PUBLIC	?TimerISR@TimerDriver@@SAXXZ			; TimerDriver::TimerISR
EXTRN	?InsertEnd@ProcessQueue@@QAEXPAVProcess@@@Z:NEAR ; ProcessQueue::InsertEnd
EXTRN	?RemoveStart@ProcessQueue@@QAEPAVProcess@@XZ:NEAR ; ProcessQueue::RemoveStart
EXTRN	?CurrentProcess@@3PAVProcess@@A:DWORD		; CurrentProcess
EXTRN	?ReadyProcesses@@3PAVProcessQueue@@A:DWORD	; ReadyProcesses
EXTRN	?DispatchTSS@@3UTSS@@A:BYTE			; DispatchTSS
; Function compile flags: /Ogty
;	COMDAT ?TimerISR@TimerDriver@@SAXXZ
_TEXT	SEGMENT
?TimerISR@TimerDriver@@SAXXZ PROC NEAR			; TimerDriver::TimerISR, COMDAT

; 19   : 	/*DWORD Temp;
; 20   : 	__asm STR Temp
; 21   : 	printf("Current task Seg: %d\n", Temp);
; 22   : 
; 23   : 	__asm PUSH EAX;
; 24   : 	__asm PUSHF;
; 25   : 	__asm POP EAX;
; 26   : 	__asm MOV Temp, EAX;
; 27   : 	__asm POP EAX;
; 28   : 	printf("Current Flags: %d\n", Temp);*/
; 29   : 
; 30   : 
; 31   : 	//while(1) printf("T");
; 32   : 	//printf("Tick");
; 33   :     TimerDriver::Ticks++;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Ticks@TimerDriver@@2KC ; TimerDriver::Ticks

; 34   : 	
; 35   : 	//printf("TaskLink: %d\n", DispatchTSS.TaskLink);
; 36   : 
; 37   : 
; 38   : 	//return;
; 39   : 	
; 40   : 
; 41   : 	//if ((Ticks & 0xF)== 0)
; 42   : 	{
; 43   : 	//printf("T\n");
; 44   : 	int pnum = CurrentProcess->ControlBlock.pnum;

  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?CurrentProcess@@3PAVProcess@@A ; CurrentProcess
  0000b	56		 push	 esi
  0000c	40		 inc	 eax
  0000d	57		 push	 edi
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?Ticks@TimerDriver@@2KC, eax ; TimerDriver::Ticks
  00013	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 45   : 	
; 46   : 	Process * NewProcess = ReadyProcesses->RemoveStart();

  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ReadyProcesses@@3PAVProcessQueue@@A ; ReadyProcesses
  0001c	e8 00 00 00 00	 call	 ?RemoveStart@ProcessQueue@@QAEPAVProcess@@XZ ; ProcessQueue::RemoveStart
  00021	8b f0		 mov	 esi, eax

; 47   : 	if (NewProcess != NULL)

  00023	85 f6		 test	 esi, esi
  00025	74 25		 je	 SHORT $L533

; 48   : 	{
; 49   : 		//printf("Switching Tasks\n");
; 50   : 		// Modify the return link for the interrupt
; 51   : 		DispatchTSS.TaskLink = (pnum + (ProcessGDTOffset/2)) << 3;
; 52   : 		ReadyProcesses->InsertEnd(CurrentProcess);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentProcess@@3PAVProcess@@A ; CurrentProcess
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ReadyProcesses@@3PAVProcessQueue@@A ; ReadyProcesses
  00032	8d 14 fd 50 00
	00 00		 lea	 edx, DWORD PTR [edi*8+80]
  00039	50		 push	 eax
  0003a	66 89 15 00 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A, dx
  00041	e8 00 00 00 00	 call	 ?InsertEnd@ProcessQueue@@QAEXPAVProcess@@@Z ; ProcessQueue::InsertEnd

; 53   : 		CurrentProcess = NewProcess;

  00046	89 35 00 00 00
	00		 mov	 DWORD PTR ?CurrentProcess@@3PAVProcess@@A, esi ; CurrentProcess
$L533:
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 54   : 	}
; 55   : 	}
; 56   : 
; 57   : }

  0004e	c3		 ret	 0
?TimerISR@TimerDriver@@SAXXZ ENDP			; TimerDriver::TimerISR
_TEXT	ENDS
END
