; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	VideoDriver.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1M@KMFFFLGG@?$AAP?$AAt?$AAr?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DisplayCharacter@@QAE@EE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DisplayCharacter@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VideoDriver@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1VideoDriver@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearScreen@VideoDriver@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetColour@VideoDriver@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPosition@VideoDriver@@QAEXEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPosition@VideoDriver@@QAEXVPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPosition@VideoDriver@@QAE?AVPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteString@VideoDriver@@QAEXPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteHexByte@VideoDriver@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DebugPrint@VideoDriver@@QAEXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DebugPrint@VideoDriver@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0Point@@QAE@HH@Z				; Point::Point
; Function compile flags: /Ogty
; File d:\my documents\projects\ooos\current\ooos\videodriver.h
;	COMDAT ??0Point@@QAE@HH@Z
_TEXT	SEGMENT
_StartX$ = 8
_StartY$ = 12
??0Point@@QAE@HH@Z PROC NEAR				; Point::Point, COMDAT
; _this$ = ecx

; 15   : 	Point(int StartX, int StartY) {X = StartX; Y= StartY;};

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _StartY$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR _StartX$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000f	c2 08 00	 ret	 8
??0Point@@QAE@HH@Z ENDP					; Point::Point
_TEXT	ENDS
PUBLIC	??0DisplayCharacter@@QAE@EE@Z			; DisplayCharacter::DisplayCharacter
; Function compile flags: /Ogty
;	COMDAT ??0DisplayCharacter@@QAE@EE@Z
_TEXT	SEGMENT
_Char$ = 8
_Col$ = 12
??0DisplayCharacter@@QAE@EE@Z PROC NEAR			; DisplayCharacter::DisplayCharacter, COMDAT
; _this$ = ecx

; 21   : 	DisplayCharacter(BYTE Char, BYTE Col) {Character = Char; Colour = Col;};

  00000	8a 54 24 08	 mov	 dl, BYTE PTR _Col$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8a 4c 24 04	 mov	 cl, BYTE PTR _Char$[esp-4]
  0000a	88 08		 mov	 BYTE PTR [eax], cl
  0000c	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0000f	c2 08 00	 ret	 8
??0DisplayCharacter@@QAE@EE@Z ENDP			; DisplayCharacter::DisplayCharacter
_TEXT	ENDS
PUBLIC	??0DisplayCharacter@@QAE@XZ			; DisplayCharacter::DisplayCharacter
; Function compile flags: /Ogty
;	COMDAT ??0DisplayCharacter@@QAE@XZ
_TEXT	SEGMENT
??0DisplayCharacter@@QAE@XZ PROC NEAR			; DisplayCharacter::DisplayCharacter, COMDAT
; _this$ = ecx

; 22   : 	DisplayCharacter() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0DisplayCharacter@@QAE@XZ ENDP			; DisplayCharacter::DisplayCharacter
_TEXT	ENDS
PUBLIC	??0VideoDriver@@QAE@XZ				; VideoDriver::VideoDriver
; Function compile flags: /Ogty
; File d:\my documents\projects\ooos\current\ooos\videodriver.cpp
;	COMDAT ??0VideoDriver@@QAE@XZ
_TEXT	SEGMENT
??0VideoDriver@@QAE@XZ PROC NEAR			; VideoDriver::VideoDriver, COMDAT
; _this$ = ecx

; 5    : {

  00000	8b c1		 mov	 eax, ecx

; 6    : 	this->CurrentPage = 0;

  00002	c6 40 07 00	 mov	 BYTE PTR [eax+7], 0

; 7    : 	this->Cursor.Colour = 15;

  00006	c6 40 06 0f	 mov	 BYTE PTR [eax+6], 15	; 0000000fH

; 8    : 	this->VideoPages = reinterpret_cast<VideoPage *> (0xb8000);

  0000a	c7 00 00 80 0b
	00		 mov	 DWORD PTR [eax], 753664	; 000b8000H

; 9    : }

  00010	c3		 ret	 0
??0VideoDriver@@QAE@XZ ENDP				; VideoDriver::VideoDriver
_TEXT	ENDS
PUBLIC	??1VideoDriver@@QAE@XZ				; VideoDriver::~VideoDriver
; Function compile flags: /Ogty
;	COMDAT ??1VideoDriver@@QAE@XZ
_TEXT	SEGMENT
??1VideoDriver@@QAE@XZ PROC NEAR			; VideoDriver::~VideoDriver, COMDAT
; _this$ = ecx

; 13   : }

  00000	c3		 ret	 0
??1VideoDriver@@QAE@XZ ENDP				; VideoDriver::~VideoDriver
_TEXT	ENDS
PUBLIC	?ClearScreen@VideoDriver@@QAEXXZ		; VideoDriver::ClearScreen
; Function compile flags: /Ogty
;	COMDAT ?ClearScreen@VideoDriver@@QAEXXZ
_TEXT	SEGMENT
?ClearScreen@VideoDriver@@QAEXXZ PROC NEAR		; VideoDriver::ClearScreen, COMDAT
; _this$ = ecx

; 16   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	57		 push	 edi

; 17   : 	for (BYTE x = 0; x < DisplayWidth; ++x)

  00004	33 ff		 xor	 edi, edi
  00006	bb 50 00 00 00	 mov	 ebx, 80			; 00000050H

; 22   : 		}
; 23   : 	}
; 24   : }

  0000b	eb 03 8d 49 00	 npad	 5

; 17   : 	for (BYTE x = 0; x < DisplayWidth; ++x)

$L519:

; 18   : 	{
; 19   : 		for (BYTE y = 0; y < DisplayHeight ; ++y)

  00010	33 d2		 xor	 edx, edx
  00012	be 19 00 00 00	 mov	 esi, 25			; 00000019H
$L386:

; 20   : 		{
; 21   : 			this->VideoPages[this->CurrentPage].Characters[y][x].Character = ' ';

  00017	0f b6 41 07	 movzx	 eax, BYTE PTR [ecx+7]
  0001b	8b 29		 mov	 ebp, DWORD PTR [ecx]
  0001d	6b c0 19	 imul	 eax, 25			; 00000019H
  00020	03 c2		 add	 eax, edx
  00022	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00025	c1 e0 04	 shl	 eax, 4
  00028	03 c7		 add	 eax, edi
  0002a	42		 inc	 edx
  0002b	4e		 dec	 esi
  0002c	c6 44 45 00 20	 mov	 BYTE PTR [ebp+eax*2], 32 ; 00000020H
  00031	75 e4		 jne	 SHORT $L386
  00033	47		 inc	 edi
  00034	4b		 dec	 ebx
  00035	75 d9		 jne	 SHORT $L519
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 22   : 		}
; 23   : 	}
; 24   : }

  0003b	c3		 ret	 0
?ClearScreen@VideoDriver@@QAEXXZ ENDP			; VideoDriver::ClearScreen
_TEXT	ENDS
PUBLIC	?SetColour@VideoDriver@@QAEXE@Z			; VideoDriver::SetColour
; Function compile flags: /Ogty
;	COMDAT ?SetColour@VideoDriver@@QAEXE@Z
_TEXT	SEGMENT
_NewColour$ = 8
?SetColour@VideoDriver@@QAEXE@Z PROC NEAR		; VideoDriver::SetColour, COMDAT
; _this$ = ecx

; 28   : 	this->Cursor.Colour = NewColour;

  00000	8a 44 24 04	 mov	 al, BYTE PTR _NewColour$[esp-4]
  00004	88 41 06	 mov	 BYTE PTR [ecx+6], al

; 29   : 
; 30   : }

  00007	c2 04 00	 ret	 4
?SetColour@VideoDriver@@QAEXE@Z ENDP			; VideoDriver::SetColour
_TEXT	ENDS
PUBLIC	?SetPosition@VideoDriver@@QAEXEE@Z		; VideoDriver::SetPosition
; Function compile flags: /Ogty
;	COMDAT ?SetPosition@VideoDriver@@QAEXEE@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
?SetPosition@VideoDriver@@QAEXEE@Z PROC NEAR		; VideoDriver::SetPosition, COMDAT
; _this$ = ecx

; 34   : 	this->Cursor.X = x;

  00000	8a 44 24 04	 mov	 al, BYTE PTR _x$[esp-4]

; 35   : 	this->Cursor.Y = y;

  00004	8a 54 24 08	 mov	 dl, BYTE PTR _y$[esp-4]
  00008	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0000b	88 51 05	 mov	 BYTE PTR [ecx+5], dl

; 36   : }

  0000e	c2 08 00	 ret	 8
?SetPosition@VideoDriver@@QAEXEE@Z ENDP			; VideoDriver::SetPosition
_TEXT	ENDS
PUBLIC	?SetPosition@VideoDriver@@QAEXVPoint@@@Z	; VideoDriver::SetPosition
; Function compile flags: /Ogty
;	COMDAT ?SetPosition@VideoDriver@@QAEXVPoint@@@Z
_TEXT	SEGMENT
_pt$ = 8
?SetPosition@VideoDriver@@QAEXVPoint@@@Z PROC NEAR	; VideoDriver::SetPosition, COMDAT
; _this$ = ecx

; 40   : 	this->Cursor.X = pt.X;

  00000	8a 44 24 04	 mov	 al, BYTE PTR _pt$[esp-4]

; 41   : 	this->Cursor.Y = pt.Y;

  00004	8a 54 24 08	 mov	 dl, BYTE PTR _pt$[esp]
  00008	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0000b	88 51 05	 mov	 BYTE PTR [ecx+5], dl

; 42   : }

  0000e	c2 08 00	 ret	 8
?SetPosition@VideoDriver@@QAEXVPoint@@@Z ENDP		; VideoDriver::SetPosition
_TEXT	ENDS
PUBLIC	?GetPosition@VideoDriver@@QAE?AVPoint@@XZ	; VideoDriver::GetPosition
; Function compile flags: /Ogty
;	COMDAT ?GetPosition@VideoDriver@@QAE?AVPoint@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
?GetPosition@VideoDriver@@QAE?AVPoint@@XZ PROC NEAR	; VideoDriver::GetPosition, COMDAT
; _this$ = ecx

; 46   : 	return Point(this->Cursor.X, this->Cursor.Y);

  00000	0f b6 51 05	 movzx	 edx, BYTE PTR [ecx+5]
  00004	0f b6 49 04	 movzx	 ecx, BYTE PTR [ecx+4]
  00008	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 47   : }

  00011	c2 04 00	 ret	 4
?GetPosition@VideoDriver@@QAE?AVPoint@@XZ ENDP		; VideoDriver::GetPosition
_TEXT	ENDS
PUBLIC	?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z ; VideoDriver::WriteChar
; Function compile flags: /Ogty
;	COMDAT ?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z
_TEXT	SEGMENT
_CurAd$ = -8
$T541 = -8
_Temp$430 = -8
$T540 = -8
_this$ = -4
_Char$ = 8
?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z PROC NEAR ; VideoDriver::WriteChar, COMDAT
; _this$ = ecx

; 50   : {

  00000	83 ec 08	 sub	 esp, 8

; 51   : 	if (Char.Character == '\n')

  00003	66 8b 54 24 0c	 mov	 dx, WORD PTR _Char$[esp+4]
  00008	80 fa 0a	 cmp	 dl, 10			; 0000000aH
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 4c 24 10	 mov	 DWORD PTR _this$[esp+20], ecx
  00012	0f 85 cd 02 00
	00		 jne	 $L411

; 52   : 	{
; 53   : 		this->Cursor.X = 0;

  00018	33 db		 xor	 ebx, ebx
  0001a	88 59 04	 mov	 BYTE PTR [ecx+4], bl

; 54   : 			if ( ++(this->Cursor.Y) == DisplayHeight)

  0001d	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  00021	fe 40 05	 inc	 BYTE PTR [eax+5]
  00024	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  00028	80 78 05 19	 cmp	 BYTE PTR [eax+5], 25	; 00000019H
  0002c	0f 85 0e 06 00
	00		 jne	 $L445

; 55   : 			{
; 56   : 				// scroll
; 57   : 				--Cursor.Y;

  00032	c6 40 05 18	 mov	 BYTE PTR [eax+5], 24	; 00000018H

; 58   : 
; 59   : 				for (int Y = 0; Y < DisplayHeight -1;++Y)

  00036	33 c9		 xor	 ecx, ecx

; 158  : 	}
; 159  : 
; 160  : 	
; 161  : }

  00038	eb 06 8d 9b 00
	00 00 00	 npad	 8

; 58   : 
; 59   : 				for (int Y = 0; Y < DisplayHeight -1;++Y)

$L414:

; 60   : 				{
; 61   :                     for (int X = 0; X < DisplayWidth; ++X)

  00040	33 c0		 xor	 eax, eax
$L418:

; 62   : 					{
; 63   : 						VideoPages[this->CurrentPage].Characters[Y][X] = VideoPages[this->CurrentPage].Characters[Y+1][X];

  00042	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00046	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  0004a	6b d2 19	 imul	 edx, 25			; 00000019H
  0004d	8b 36		 mov	 esi, DWORD PTR [esi]
  0004f	03 d1		 add	 edx, ecx
  00051	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00054	c1 e2 04	 shl	 edx, 4
  00057	03 d0		 add	 edx, eax
  00059	66 8b bc 56 a0
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+160]
  00061	66 89 3c 56	 mov	 WORD PTR [esi+edx*2], di
  00065	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00069	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  0006d	6b d2 19	 imul	 edx, 25			; 00000019H
  00070	8b 36		 mov	 esi, DWORD PTR [esi]
  00072	03 d1		 add	 edx, ecx
  00074	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00077	c1 e2 04	 shl	 edx, 4
  0007a	03 d0		 add	 edx, eax
  0007c	66 8b bc 56 a2
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+162]
  00084	66 89 7c 56 02	 mov	 WORD PTR [esi+edx*2+2], di
  00089	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  0008d	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00091	6b d2 19	 imul	 edx, 25			; 00000019H
  00094	8b 36		 mov	 esi, DWORD PTR [esi]
  00096	03 d1		 add	 edx, ecx
  00098	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0009b	c1 e2 04	 shl	 edx, 4
  0009e	03 d0		 add	 edx, eax
  000a0	66 8b bc 56 a4
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+164]
  000a8	66 89 7c 56 04	 mov	 WORD PTR [esi+edx*2+4], di
  000ad	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  000b1	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  000b5	8b 36		 mov	 esi, DWORD PTR [esi]
  000b7	6b d2 19	 imul	 edx, 25			; 00000019H
  000ba	03 d1		 add	 edx, ecx
  000bc	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  000bf	c1 e2 04	 shl	 edx, 4
  000c2	03 d0		 add	 edx, eax
  000c4	66 8b bc 56 a6
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+166]
  000cc	66 89 7c 56 06	 mov	 WORD PTR [esi+edx*2+6], di
  000d1	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  000d5	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  000d9	8b 36		 mov	 esi, DWORD PTR [esi]
  000db	6b d2 19	 imul	 edx, 25			; 00000019H
  000de	03 d1		 add	 edx, ecx
  000e0	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  000e3	c1 e2 04	 shl	 edx, 4
  000e6	03 d0		 add	 edx, eax
  000e8	66 8b bc 56 a8
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+168]
  000f0	66 89 7c 56 08	 mov	 WORD PTR [esi+edx*2+8], di
  000f5	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  000f9	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  000fd	8b 36		 mov	 esi, DWORD PTR [esi]
  000ff	6b d2 19	 imul	 edx, 25			; 00000019H
  00102	03 d1		 add	 edx, ecx
  00104	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00107	c1 e2 04	 shl	 edx, 4
  0010a	03 d0		 add	 edx, eax
  0010c	66 8b bc 56 aa
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+170]
  00114	66 89 7c 56 0a	 mov	 WORD PTR [esi+edx*2+10], di
  00119	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  0011d	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00121	8b 36		 mov	 esi, DWORD PTR [esi]
  00123	6b d2 19	 imul	 edx, 25			; 00000019H
  00126	03 d1		 add	 edx, ecx
  00128	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0012b	c1 e2 04	 shl	 edx, 4
  0012e	03 d0		 add	 edx, eax
  00130	66 8b bc 56 ac
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+172]
  00138	66 89 7c 56 0c	 mov	 WORD PTR [esi+edx*2+12], di
  0013d	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00141	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00145	8b 36		 mov	 esi, DWORD PTR [esi]
  00147	6b d2 19	 imul	 edx, 25			; 00000019H
  0014a	03 d1		 add	 edx, ecx
  0014c	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0014f	c1 e2 04	 shl	 edx, 4
  00152	03 d0		 add	 edx, eax
  00154	66 8b bc 56 ae
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+174]
  0015c	66 89 7c 56 0e	 mov	 WORD PTR [esi+edx*2+14], di
  00161	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00165	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00169	8b 36		 mov	 esi, DWORD PTR [esi]
  0016b	6b d2 19	 imul	 edx, 25			; 00000019H
  0016e	03 d1		 add	 edx, ecx
  00170	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00173	c1 e2 04	 shl	 edx, 4
  00176	03 d0		 add	 edx, eax
  00178	66 8b bc 56 b0
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+176]
  00180	66 89 7c 56 10	 mov	 WORD PTR [esi+edx*2+16], di
  00185	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00189	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  0018d	8b 36		 mov	 esi, DWORD PTR [esi]
  0018f	6b d2 19	 imul	 edx, 25			; 00000019H
  00192	03 d1		 add	 edx, ecx
  00194	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00197	c1 e2 04	 shl	 edx, 4
  0019a	03 d0		 add	 edx, eax
  0019c	66 8b bc 56 b2
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+178]
  001a4	83 c0 0a	 add	 eax, 10			; 0000000aH
  001a7	83 f8 50	 cmp	 eax, 80			; 00000050H
  001aa	66 89 7c 56 12	 mov	 WORD PTR [esi+edx*2+18], di
  001af	0f 8c 8d fe ff
	ff		 jl	 $L418
  001b5	41		 inc	 ecx
  001b6	83 f9 18	 cmp	 ecx, 24			; 00000018H
  001b9	0f 8c 81 fe ff
	ff		 jl	 $L414

; 64   : 					}
; 65   : 				}
; 66   :                 for (int X = 0; X < DisplayWidth; ++X)
; 67   : 				{
; 68   : 					VideoPages[this->CurrentPage].Characters[DisplayHeight-1][X] = DisplayCharacter(0,0);

  001bf	88 5c 24 0c	 mov	 BYTE PTR $T540[esp+20], bl
  001c3	88 5c 24 0d	 mov	 BYTE PTR $T540[esp+21], bl
  001c7	66 8b 4c 24 0c	 mov	 cx, WORD PTR $T540[esp+20]
  001cc	33 c0		 xor	 eax, eax

; 158  : 	}
; 159  : 
; 160  : 	
; 161  : }

  001ce	8b ff		 npad	 2

; 64   : 					}
; 65   : 				}
; 66   :                 for (int X = 0; X < DisplayWidth; ++X)
; 67   : 				{
; 68   : 					VideoPages[this->CurrentPage].Characters[DisplayHeight-1][X] = DisplayCharacter(0,0);

$L422:
  001d0	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  001d4	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  001d8	8b 12		 mov	 edx, DWORD PTR [edx]
  001da	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  001e0	03 f0		 add	 esi, eax
  001e2	66 89 8c 72 00
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3840], cx
  001ea	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  001ee	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  001f2	8b 12		 mov	 edx, DWORD PTR [edx]
  001f4	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  001fa	03 f0		 add	 esi, eax
  001fc	66 89 8c 72 02
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3842], cx
  00204	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00208	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  0020c	8b 12		 mov	 edx, DWORD PTR [edx]
  0020e	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  00214	03 f0		 add	 esi, eax
  00216	66 89 8c 72 04
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3844], cx
  0021e	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00222	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00226	8b 12		 mov	 edx, DWORD PTR [edx]
  00228	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  0022e	03 f0		 add	 esi, eax
  00230	66 89 8c 72 06
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3846], cx
  00238	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  0023c	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00240	8b 12		 mov	 edx, DWORD PTR [edx]
  00242	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  00248	03 f0		 add	 esi, eax
  0024a	66 89 8c 72 08
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3848], cx
  00252	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00256	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  0025a	8b 12		 mov	 edx, DWORD PTR [edx]
  0025c	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  00262	03 f0		 add	 esi, eax
  00264	66 89 8c 72 0a
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3850], cx
  0026c	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00270	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00274	8b 12		 mov	 edx, DWORD PTR [edx]
  00276	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  0027c	03 f0		 add	 esi, eax
  0027e	66 89 8c 72 0c
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3852], cx
  00286	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  0028a	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  0028e	8b 12		 mov	 edx, DWORD PTR [edx]
  00290	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  00296	03 f0		 add	 esi, eax
  00298	66 89 8c 72 0e
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3854], cx
  002a0	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  002a4	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  002a8	8b 12		 mov	 edx, DWORD PTR [edx]
  002aa	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  002b0	03 f0		 add	 esi, eax
  002b2	66 89 8c 72 10
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3856], cx
  002ba	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  002be	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  002c2	8b 12		 mov	 edx, DWORD PTR [edx]
  002c4	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  002ca	03 f0		 add	 esi, eax
  002cc	83 c0 0a	 add	 eax, 10			; 0000000aH
  002cf	83 f8 50	 cmp	 eax, 80			; 00000050H
  002d2	66 89 8c 72 12
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3858], cx
  002da	0f 8c f0 fe ff
	ff		 jl	 $L422

; 69   : 				}
; 70   : 
; 71   : 				//this->Cursor.Y = 0;
; 72   : 			}
; 73   : 	}
; 74   : 	else if (Char.Character == '\b')

  002e0	e9 5b 03 00 00	 jmp	 $L445
$L411:
  002e5	80 fa 08	 cmp	 dl, 8
  002e8	75 5f		 jne	 SHORT $L427

; 75   : 	{
; 76   : 		//Cursor.X = 3;
; 77   : 		if ((this->Cursor.X) == 0)

  002ea	8a 41 04	 mov	 al, BYTE PTR [ecx+4]
  002ed	33 db		 xor	 ebx, ebx
  002ef	3a c3		 cmp	 al, bl
  002f1	75 1c		 jne	 SHORT $L428

; 78   : 		{
; 79   : 			Cursor.X = DisplayWidth;

  002f3	c6 41 04 50	 mov	 BYTE PTR [ecx+4], 80	; 00000050H

; 80   : 			if ((this->Cursor.Y) == 0)

  002f7	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  002fb	38 58 05	 cmp	 BYTE PTR [eax+5], bl
  002fe	75 08		 jne	 SHORT $L429

; 81   : 			{
; 82   : 				Cursor.Y = 1;//DisplayHeight;

  00300	c6 40 05 01	 mov	 BYTE PTR [eax+5], 1
  00304	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
$L429:

; 83   : 			}
; 84   : 			Cursor.Y--;

  00308	fe 48 05	 dec	 BYTE PTR [eax+5]
  0030b	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$[esp+20]
$L428:

; 85   : 		}
; 86   : 		Cursor.X--;

  0030f	fe 49 04	 dec	 BYTE PTR [ecx+4]

; 87   : 		DisplayCharacter Temp;
; 88   : 		Temp.Character = ' ';
; 89   : 		Temp.Colour = 15;
; 90   : 		this->VideoPages[this->CurrentPage].Characters[this->Cursor.Y][this->Cursor.X] = Temp;

  00312	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$[esp+20]
  00316	0f b6 41 07	 movzx	 eax, BYTE PTR [ecx+7]
  0031a	0f b6 51 05	 movzx	 edx, BYTE PTR [ecx+5]
  0031e	6b c0 19	 imul	 eax, 25			; 00000019H
  00321	03 c2		 add	 eax, edx
  00323	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  00327	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00329	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0032c	c1 e0 04	 shl	 eax, 4
  0032f	03 c2		 add	 eax, edx
  00331	c6 44 24 0c 20	 mov	 BYTE PTR _Temp$430[esp+20], 32 ; 00000020H
  00336	c6 44 24 0d 0f	 mov	 BYTE PTR _Temp$430[esp+21], 15 ; 0000000fH
  0033b	66 8b 54 24 0c	 mov	 dx, WORD PTR _Temp$430[esp+20]
  00340	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 91   : 
; 92   : 	}
; 93   : 	else

  00344	e9 f7 02 00 00	 jmp	 $L445
$L427:

; 94   : 	{
; 95   : 		this->VideoPages[this->CurrentPage].Characters[this->Cursor.Y][this->Cursor.X] = Char;

  00349	0f b6 41 07	 movzx	 eax, BYTE PTR [ecx+7]
  0034d	0f b6 71 05	 movzx	 esi, BYTE PTR [ecx+5]
  00351	6b c0 19	 imul	 eax, 25			; 00000019H
  00354	03 c6		 add	 eax, esi
  00356	0f b6 71 04	 movzx	 esi, BYTE PTR [ecx+4]
  0035a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0035c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0035f	c1 e0 04	 shl	 eax, 4
  00362	03 c6		 add	 eax, esi
  00364	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 96   : 		if (++(this->Cursor.X) == DisplayWidth)

  00368	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  0036c	fe 40 04	 inc	 BYTE PTR [eax+4]
  0036f	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  00373	80 78 04 50	 cmp	 BYTE PTR [eax+4], 80	; 00000050H
  00377	0f 85 c3 02 00
	00		 jne	 $L445

; 97   : 		{
; 98   : 			this->Cursor.X = 0;

  0037d	33 db		 xor	 ebx, ebx
  0037f	88 58 04	 mov	 BYTE PTR [eax+4], bl

; 99   : 			if ( ++(this->Cursor.Y) == DisplayHeight)

  00382	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  00386	fe 40 05	 inc	 BYTE PTR [eax+5]
  00389	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  0038d	80 78 05 19	 cmp	 BYTE PTR [eax+5], 25	; 00000019H
  00391	0f 85 a9 02 00
	00		 jne	 $L445

; 100  : 			{
; 101  : 				// scroll
; 102  : 				--Cursor.Y;

  00397	c6 40 05 18	 mov	 BYTE PTR [eax+5], 24	; 00000018H

; 103  : 
; 104  : 				for (int Y = 0; Y < DisplayHeight -1;++Y)

  0039b	33 c9		 xor	 ecx, ecx

; 158  : 	}
; 159  : 
; 160  : 	
; 161  : }

  0039d	8d 49 00	 npad	 3

; 103  : 
; 104  : 				for (int Y = 0; Y < DisplayHeight -1;++Y)

$L435:

; 105  : 				{
; 106  :                     for (int X = 0; X < DisplayWidth; ++X)

  003a0	33 c0		 xor	 eax, eax
$L439:

; 107  : 					{
; 108  : 						VideoPages[this->CurrentPage].Characters[Y][X] = VideoPages[this->CurrentPage].Characters[Y+1][X];

  003a2	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  003a6	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  003aa	6b d2 19	 imul	 edx, 25			; 00000019H
  003ad	8b 36		 mov	 esi, DWORD PTR [esi]
  003af	03 d1		 add	 edx, ecx
  003b1	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  003b4	c1 e2 04	 shl	 edx, 4
  003b7	03 d0		 add	 edx, eax
  003b9	66 8b bc 56 a0
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+160]
  003c1	66 89 3c 56	 mov	 WORD PTR [esi+edx*2], di
  003c5	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  003c9	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  003cd	6b d2 19	 imul	 edx, 25			; 00000019H
  003d0	8b 36		 mov	 esi, DWORD PTR [esi]
  003d2	03 d1		 add	 edx, ecx
  003d4	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  003d7	c1 e2 04	 shl	 edx, 4
  003da	03 d0		 add	 edx, eax
  003dc	66 8b bc 56 a2
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+162]
  003e4	66 89 7c 56 02	 mov	 WORD PTR [esi+edx*2+2], di
  003e9	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  003ed	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  003f1	6b d2 19	 imul	 edx, 25			; 00000019H
  003f4	8b 36		 mov	 esi, DWORD PTR [esi]
  003f6	03 d1		 add	 edx, ecx
  003f8	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  003fb	c1 e2 04	 shl	 edx, 4
  003fe	03 d0		 add	 edx, eax
  00400	66 8b bc 56 a4
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+164]
  00408	66 89 7c 56 04	 mov	 WORD PTR [esi+edx*2+4], di
  0040d	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00411	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00415	8b 36		 mov	 esi, DWORD PTR [esi]
  00417	6b d2 19	 imul	 edx, 25			; 00000019H
  0041a	03 d1		 add	 edx, ecx
  0041c	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0041f	c1 e2 04	 shl	 edx, 4
  00422	03 d0		 add	 edx, eax
  00424	66 8b bc 56 a6
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+166]
  0042c	66 89 7c 56 06	 mov	 WORD PTR [esi+edx*2+6], di
  00431	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00435	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00439	8b 36		 mov	 esi, DWORD PTR [esi]
  0043b	6b d2 19	 imul	 edx, 25			; 00000019H
  0043e	03 d1		 add	 edx, ecx
  00440	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00443	c1 e2 04	 shl	 edx, 4
  00446	03 d0		 add	 edx, eax
  00448	66 8b bc 56 a8
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+168]
  00450	66 89 7c 56 08	 mov	 WORD PTR [esi+edx*2+8], di
  00455	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  00459	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  0045d	8b 36		 mov	 esi, DWORD PTR [esi]
  0045f	6b d2 19	 imul	 edx, 25			; 00000019H
  00462	03 d1		 add	 edx, ecx
  00464	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00467	c1 e2 04	 shl	 edx, 4
  0046a	03 d0		 add	 edx, eax
  0046c	66 8b bc 56 aa
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+170]
  00474	66 89 7c 56 0a	 mov	 WORD PTR [esi+edx*2+10], di
  00479	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  0047d	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00481	8b 36		 mov	 esi, DWORD PTR [esi]
  00483	6b d2 19	 imul	 edx, 25			; 00000019H
  00486	03 d1		 add	 edx, ecx
  00488	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0048b	c1 e2 04	 shl	 edx, 4
  0048e	03 d0		 add	 edx, eax
  00490	66 8b bc 56 ac
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+172]
  00498	66 89 7c 56 0c	 mov	 WORD PTR [esi+edx*2+12], di
  0049d	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  004a1	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  004a5	8b 36		 mov	 esi, DWORD PTR [esi]
  004a7	6b d2 19	 imul	 edx, 25			; 00000019H
  004aa	03 d1		 add	 edx, ecx
  004ac	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  004af	c1 e2 04	 shl	 edx, 4
  004b2	03 d0		 add	 edx, eax
  004b4	66 8b bc 56 ae
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+174]
  004bc	66 89 7c 56 0e	 mov	 WORD PTR [esi+edx*2+14], di
  004c1	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  004c5	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  004c9	8b 36		 mov	 esi, DWORD PTR [esi]
  004cb	6b d2 19	 imul	 edx, 25			; 00000019H
  004ce	03 d1		 add	 edx, ecx
  004d0	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  004d3	c1 e2 04	 shl	 edx, 4
  004d6	03 d0		 add	 edx, eax
  004d8	66 8b bc 56 b0
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+176]
  004e0	66 89 7c 56 10	 mov	 WORD PTR [esi+edx*2+16], di
  004e5	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  004e9	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  004ed	8b 36		 mov	 esi, DWORD PTR [esi]
  004ef	6b d2 19	 imul	 edx, 25			; 00000019H
  004f2	03 d1		 add	 edx, ecx
  004f4	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  004f7	c1 e2 04	 shl	 edx, 4
  004fa	03 d0		 add	 edx, eax
  004fc	66 8b bc 56 b2
	00 00 00	 mov	 di, WORD PTR [esi+edx*2+178]
  00504	83 c0 0a	 add	 eax, 10			; 0000000aH
  00507	83 f8 50	 cmp	 eax, 80			; 00000050H
  0050a	66 89 7c 56 12	 mov	 WORD PTR [esi+edx*2+18], di
  0050f	0f 8c 8d fe ff
	ff		 jl	 $L439
  00515	41		 inc	 ecx
  00516	83 f9 18	 cmp	 ecx, 24			; 00000018H
  00519	0f 8c 81 fe ff
	ff		 jl	 $L435

; 109  : 					}
; 110  : 				}
; 111  :                 for (int X = 0; X < DisplayWidth; ++X)
; 112  : 				{
; 113  : 					VideoPages[this->CurrentPage].Characters[DisplayHeight-1][X] = DisplayCharacter(0,0);

  0051f	88 5c 24 0c	 mov	 BYTE PTR $T541[esp+20], bl
  00523	88 5c 24 0d	 mov	 BYTE PTR $T541[esp+21], bl
  00527	66 8b 4c 24 0c	 mov	 cx, WORD PTR $T541[esp+20]
  0052c	33 c0		 xor	 eax, eax

; 158  : 	}
; 159  : 
; 160  : 	
; 161  : }

  0052e	8b ff		 npad	 2

; 109  : 					}
; 110  : 				}
; 111  :                 for (int X = 0; X < DisplayWidth; ++X)
; 112  : 				{
; 113  : 					VideoPages[this->CurrentPage].Characters[DisplayHeight-1][X] = DisplayCharacter(0,0);

$L443:
  00530	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00534	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00538	8b 12		 mov	 edx, DWORD PTR [edx]
  0053a	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  00540	03 f0		 add	 esi, eax
  00542	66 89 8c 72 00
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3840], cx
  0054a	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  0054e	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00552	8b 12		 mov	 edx, DWORD PTR [edx]
  00554	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  0055a	03 f0		 add	 esi, eax
  0055c	66 89 8c 72 02
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3842], cx
  00564	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00568	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  0056c	8b 12		 mov	 edx, DWORD PTR [edx]
  0056e	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  00574	03 f0		 add	 esi, eax
  00576	66 89 8c 72 04
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3844], cx
  0057e	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00582	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00586	8b 12		 mov	 edx, DWORD PTR [edx]
  00588	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  0058e	03 f0		 add	 esi, eax
  00590	66 89 8c 72 06
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3846], cx
  00598	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  0059c	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  005a0	8b 12		 mov	 edx, DWORD PTR [edx]
  005a2	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  005a8	03 f0		 add	 esi, eax
  005aa	66 89 8c 72 08
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3848], cx
  005b2	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  005b6	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  005ba	8b 12		 mov	 edx, DWORD PTR [edx]
  005bc	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  005c2	03 f0		 add	 esi, eax
  005c4	66 89 8c 72 0a
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3850], cx
  005cc	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  005d0	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  005d4	8b 12		 mov	 edx, DWORD PTR [edx]
  005d6	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  005dc	03 f0		 add	 esi, eax
  005de	66 89 8c 72 0c
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3852], cx
  005e6	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  005ea	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  005ee	8b 12		 mov	 edx, DWORD PTR [edx]
  005f0	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  005f6	03 f0		 add	 esi, eax
  005f8	66 89 8c 72 0e
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3854], cx
  00600	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  00604	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00608	8b 12		 mov	 edx, DWORD PTR [edx]
  0060a	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  00610	03 f0		 add	 esi, eax
  00612	66 89 8c 72 10
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3856], cx
  0061a	8b 54 24 10	 mov	 edx, DWORD PTR _this$[esp+20]
  0061e	0f b6 72 07	 movzx	 esi, BYTE PTR [edx+7]
  00622	8b 12		 mov	 edx, DWORD PTR [edx]
  00624	69 f6 d0 07 00
	00		 imul	 esi, 2000		; 000007d0H
  0062a	03 f0		 add	 esi, eax
  0062c	83 c0 0a	 add	 eax, 10			; 0000000aH
  0062f	83 f8 50	 cmp	 eax, 80			; 00000050H
  00632	66 89 8c 72 12
	0f 00 00	 mov	 WORD PTR [edx+esi*2+3858], cx
  0063a	0f 8c f0 fe ff
	ff		 jl	 $L443
$L445:

; 114  : 				}
; 115  : 
; 116  : 				//this->Cursor.Y = 0;
; 117  : 			}
; 118  : 		}
; 119  : 	}
; 120  : 	// Set cursor location
; 121  : 	WORD CurAd = 40;//Cursor.GetCursorAddress();

  00640	c7 44 24 0c 28
	00 00 00	 mov	 DWORD PTR _CurAd$[esp+20], 40 ; 00000028H

; 122  : 	__asm
; 123  : 	{
; 124  : 		PUSH AX;

  00648	66 50		 push	 ax

; 125  : 		PUSH DX;

  0064a	66 52		 push	 dx

; 126  : 
; 127  : 		/*MOV AL, 0xA
; 128  : 		MOV DX, CRT_6845_REG_SEL;
; 129  : 		OUT DX, AL;
; 130  : 		MOV AL, 0x9;
; 131  : 		MOV DX, CRT_6845_REG_DATA;
; 132  : 		OUT DX, AL
; 133  : 		MOV AL, 0xB
; 134  : 		MOV DX, CRT_6845_REG_SEL;
; 135  : 		OUT DX, AL;
; 136  : 		MOV AL, 0x9;
; 137  : 		MOV DX, CRT_6845_REG_DATA;
; 138  : 		OUT DX, AL*/
; 139  : 
; 140  : 
; 141  : 		
; 142  : 		MOV AL, 0xF

  0064c	b0 0f		 mov	 al, 15			; 0000000fH

; 143  : 		MOV DX, CRT_6845_REG_SEL;

  0064e	66 ba d4 03	 mov	 dx, 980			; 000003d4H

; 144  : 		OUT DX, AL;

  00652	ee		 out	 dx, al

; 145  : 		MOV AX, CurAd;

  00653	66 8b 44 24 14	 mov	 ax, WORD PTR _CurAd$[esp+28]

; 146  : 		MOV DX, CRT_6845_REG_DATA;

  00658	66 ba d5 03	 mov	 dx, 981			; 000003d5H

; 147  : 		OUT DX, AL

  0065c	ee		 out	 dx, al

; 148  : 
; 149  : 		MOV AL, 0xE

  0065d	b0 0e		 mov	 al, 14			; 0000000eH

; 150  : 		MOV DX, CRT_6845_REG_SEL;

  0065f	66 ba d4 03	 mov	 dx, 980			; 000003d4H

; 151  : 		OUT DX, AL;

  00663	ee		 out	 dx, al

; 152  : 		MOV AL, AH;

  00664	8a c4		 mov	 al, ah

; 153  : 		MOV DX, CRT_6845_REG_DATA;

  00666	66 ba d5 03	 mov	 dx, 981			; 000003d5H

; 154  : 		OUT DX, AL

  0066a	ee		 out	 dx, al

; 155  : 
; 156  : 		POP DX

  0066b	66 5a		 pop	 dx

; 157  : 		POP AX

  0066d	66 58		 pop	 ax

; 158  : 	}
; 159  : 
; 160  : 	
; 161  : }

  0066f	5f		 pop	 edi
  00670	5e		 pop	 esi
  00671	5b		 pop	 ebx
  00672	83 c4 08	 add	 esp, 8
  00675	c2 04 00	 ret	 4
?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z ENDP	; VideoDriver::WriteChar
_TEXT	ENDS
PUBLIC	?WriteString@VideoDriver@@QAEXPA_W@Z		; VideoDriver::WriteString
; Function compile flags: /Ogty
;	COMDAT ?WriteString@VideoDriver@@QAEXPA_W@Z
_TEXT	SEGMENT
_TempChar$ = -4
_String$ = 8
?WriteString@VideoDriver@@QAEXPA_W@Z PROC NEAR		; VideoDriver::WriteString, COMDAT
; _this$ = ecx

; 164  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 165  : 	DisplayCharacter TempChar;
; 166  : 	TempChar.Colour = this->Cursor.Colour;
; 167  : 	for (unsigned long i = 0; String[i] != '\0' && i != -1; ++i)

  00004	8b 7c 24 14	 mov	 edi, DWORD PTR _String$[esp+12]
  00008	8b d9		 mov	 ebx, ecx
  0000a	8a 43 06	 mov	 al, BYTE PTR [ebx+6]
  0000d	33 f6		 xor	 esi, esi
  0000f	66 39 37	 cmp	 WORD PTR [edi], si
  00012	88 44 24 0d	 mov	 BYTE PTR _TempChar$[esp+17], al
  00016	74 20		 je	 SHORT $L456
$L454:
  00018	83 fe ff	 cmp	 esi, -1
  0001b	74 1b		 je	 SHORT $L456

; 168  : 	{
; 169  : 		TempChar.Character = static_cast <BYTE> (String[i]);

  0001d	8a 0c 77	 mov	 cl, BYTE PTR [edi+esi*2]
  00020	88 4c 24 0c	 mov	 BYTE PTR _TempChar$[esp+16], cl

; 170  : 		this->WriteChar(TempChar);

  00024	8b 54 24 0c	 mov	 edx, DWORD PTR _TempChar$[esp+16]
  00028	52		 push	 edx
  00029	8b cb		 mov	 ecx, ebx
  0002b	e8 00 00 00 00	 call	 ?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z ; VideoDriver::WriteChar
  00030	46		 inc	 esi
  00031	66 83 3c 77 00	 cmp	 WORD PTR [edi+esi*2], 0
  00036	75 e0		 jne	 SHORT $L454
$L456:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 171  : 	}
; 172  : }

  0003b	59		 pop	 ecx
  0003c	c2 04 00	 ret	 4
?WriteString@VideoDriver@@QAEXPA_W@Z ENDP		; VideoDriver::WriteString
_TEXT	ENDS
PUBLIC	?WriteHexByte@VideoDriver@@QAEXE@Z		; VideoDriver::WriteHexByte
; Function compile flags: /Ogty
;	COMDAT ?WriteHexByte@VideoDriver@@QAEXE@Z
_TEXT	SEGMENT
_TempChar$ = -4
_b$ = 8
?WriteHexByte@VideoDriver@@QAEXE@Z PROC NEAR		; VideoDriver::WriteHexByte, COMDAT
; _this$ = ecx

; 176  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx

; 177  : 	DisplayCharacter TempChar;
; 178  : 	TempChar.Colour = this->Cursor.Colour;

  00005	8a 46 06	 mov	 al, BYTE PTR [esi+6]
  00008	88 44 24 09	 mov	 BYTE PTR _TempChar$[esp+13], al

; 179  : 	TempChar.Character = (b >> 4) < 10 ? (b >> 4) + '0' : (b >> 4) + 'A' - 10;

  0000c	8a 44 24 10	 mov	 al, BYTE PTR _b$[esp+8]
  00010	8a c8		 mov	 cl, al
  00012	80 e1 f0	 and	 cl, 240			; 000000f0H
  00015	80 f9 a0	 cmp	 cl, 160			; 000000a0H
  00018	0f b6 d8	 movzx	 ebx, al
  0001b	73 0e		 jae	 SHORT $L574
  0001d	8b d3		 mov	 edx, ebx
  0001f	c1 ea 04	 shr	 edx, 4
  00022	80 c2 30	 add	 dl, 48			; 00000030H
  00025	88 54 24 08	 mov	 BYTE PTR _TempChar$[esp+12], dl
  00029	eb 0b		 jmp	 SHORT $L575
$L574:
  0002b	8b c3		 mov	 eax, ebx
  0002d	c1 e8 04	 shr	 eax, 4
  00030	04 37		 add	 al, 55			; 00000037H
  00032	88 44 24 08	 mov	 BYTE PTR _TempChar$[esp+12], al
$L575:

; 180  : 	this->WriteChar(TempChar);

  00036	8b 4c 24 08	 mov	 ecx, DWORD PTR _TempChar$[esp+12]
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z ; VideoDriver::WriteChar

; 181  : 	TempChar.Character = (b & 0xF) < 10 ? (b & 0xF) + '0' : (b & 0xF) + 'A' - 10;

  00042	8a 44 24 10	 mov	 al, BYTE PTR _b$[esp+8]
  00046	24 0f		 and	 al, 15			; 0000000fH
  00048	80 e3 0f	 and	 bl, 15			; 0000000fH
  0004b	3c 0a		 cmp	 al, 10			; 0000000aH
  0004d	73 05		 jae	 SHORT $L576
  0004f	80 c3 30	 add	 bl, 48			; 00000030H
  00052	eb 03		 jmp	 SHORT $L581
$L576:
  00054	80 c3 37	 add	 bl, 55			; 00000037H
$L581:
  00057	88 5c 24 08	 mov	 BYTE PTR _TempChar$[esp+12], bl

; 182  : 	this->WriteChar(TempChar);

  0005b	8b 54 24 08	 mov	 edx, DWORD PTR _TempChar$[esp+12]
  0005f	52		 push	 edx
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?WriteChar@VideoDriver@@AAEXUDisplayCharacter@@@Z ; VideoDriver::WriteChar
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx

; 183  : }

  00069	59		 pop	 ecx
  0006a	c2 04 00	 ret	 4
?WriteHexByte@VideoDriver@@QAEXE@Z ENDP			; VideoDriver::WriteHexByte
_TEXT	ENDS
PUBLIC	?DebugPrint@VideoDriver@@QAEXK@Z		; VideoDriver::DebugPrint
PUBLIC	??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@		; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
;	COMDAT ??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@ DB '0', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?DebugPrint@VideoDriver@@QAEXK@Z
_TEXT	SEGMENT
_num$ = 8
?DebugPrint@VideoDriver@@QAEXK@Z PROC NEAR		; VideoDriver::DebugPrint, COMDAT
; _this$ = ecx

; 193  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 194  : 	WriteString(L"0x");	

  00002	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 195  : 	WriteHexByte(num >> 24);

  0000e	8b 7c 24 0c	 mov	 edi, DWORD PTR _num$[esp+4]
  00012	8b c7		 mov	 eax, edi
  00014	c1 e8 18	 shr	 eax, 24			; 00000018H
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?WriteHexByte@VideoDriver@@QAEXE@Z ; VideoDriver::WriteHexByte

; 196  : 	WriteHexByte(num >> 16);

  0001f	8b cf		 mov	 ecx, edi
  00021	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?WriteHexByte@VideoDriver@@QAEXE@Z ; VideoDriver::WriteHexByte

; 197  : 	WriteHexByte(num >> 8);

  0002c	8b d7		 mov	 edx, edi
  0002e	c1 ea 08	 shr	 edx, 8
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?WriteHexByte@VideoDriver@@QAEXE@Z ; VideoDriver::WriteHexByte

; 198  : 	WriteHexByte(num);

  00039	57		 push	 edi
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?WriteHexByte@VideoDriver@@QAEXE@Z ; VideoDriver::WriteHexByte

; 199  : 	WriteString(L" ");

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 200  : }

  0004f	c2 04 00	 ret	 4
?DebugPrint@VideoDriver@@QAEXK@Z ENDP			; VideoDriver::DebugPrint
_TEXT	ENDS
PUBLIC	?DebugPrint@VideoDriver@@QAEXPAX@Z		; VideoDriver::DebugPrint
PUBLIC	??_C@_1M@KMFFFLGG@?$AAP?$AAt?$AAr?$AA?3?$AA?5?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1M@KMFFFLGG@?$AAP?$AAt?$AAr?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KMFFFLGG@?$AAP?$AAt?$AAr?$AA?3?$AA?5?$AA?$AA@ DB 'P', 00H, 't', 00H
	DB	'r', 00H, ':', 00H, ' ', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?DebugPrint@VideoDriver@@QAEXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
?DebugPrint@VideoDriver@@QAEXPAX@Z PROC NEAR		; VideoDriver::DebugPrint, COMDAT
; _this$ = ecx

; 187  : {

  00000	56		 push	 esi

; 188  : 	WriteString(L"Ptr: ");

  00001	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1M@KMFFFLGG@?$AAP?$AAt?$AAr?$AA?3?$AA?5?$AA?$AA@
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 189  : 	DebugPrint(reinterpret_cast<unsigned long> (ptr));

  0000d	8b 44 24 08	 mov	 eax, DWORD PTR _ptr$[esp]
  00011	50		 push	 eax
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?DebugPrint@VideoDriver@@QAEXK@Z ; VideoDriver::DebugPrint
  00019	5e		 pop	 esi

; 190  : }

  0001a	c2 04 00	 ret	 4
?DebugPrint@VideoDriver@@QAEXPAX@Z ENDP			; VideoDriver::DebugPrint
_TEXT	ENDS
END
