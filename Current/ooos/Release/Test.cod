; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	Test.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0N@KONKHPBC@Invalid?5TSS?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HPIJIFCF@ECODE?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@NAPKEEAF@CS?3EIP?5?$CFd?3?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LKOKBINO@FLAGS?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@COPIHALL@Current?5task?5Seg?3?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@KNMBDACL@Register?5Dump?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@PEINGJCK@EAX?3?5?$CFd?5?5?5?5EBX?3?5?$CFd?5?5?5?5ECX?3?5?$CFd?5?5?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@HNOEPFBO@EDI?3?5?$CFd?5?5?5?5ESI?3?5?$CFd?5?5?5?5EBP?3?5?$CFd?5?5?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@LHEKDIIJ@GlobalTSS?5Dump?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@EPGDEDFI@?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@DEBEJCDJ@General?5Protection?5Fault?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@BECKEBJP@?$CFd?3?5?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1EA@PCALOENF@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAs?$AAe?$AAd?$AA?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CE@LAAGDDIB@?$AAC?$AAa?$AAb?$AAo?$AAo?$AAs?$AAe?$AA?5?$AAv?$AA0?$AA?4?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?6?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1FC@OADJIDMP@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAE?$AAx?$AAc?$AAe@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1FA@KFBANILN@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAT?$AAS?$AAS?$AA?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1FC@HJFAKFNI@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAI?$AAn?$AAt?$AAe@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1EC@KNNFMMNH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAP?$AAI?$AAC?$AA?8?$AAs?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAn?$AAt@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1DC@DEPIFANH@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1DC@DOGCHMEA@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAd?$AAl?$AAe?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06IPGPIAII@?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHBJAEIG@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAr?$AAm?$AAi?$AAn?$AAa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@NFNAADMG@That?5is?5bad?0?5System?5Halted?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CE@PFBKFDOA@?$AA?6?$AAT?$AAh?$AAa?$AAt?$AAs?$AA?5?$AAa?$AAl?$AAl?$AA?5?$AAF?$AAo?$AAl?$AAk?$AAs?$AA?6?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT ??0ProcessNode@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ProcessQueue@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exception10_CPP@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exception13_CPP@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E3
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT ?KernelEntry@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Snake@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7Shell@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?DispatchTSS@@3UTSS@@A				; DispatchTSS
PUBLIC	?DumpSpace@@3URegDump@@A			; DumpSpace
PUBLIC	?pDump@@3PAXA					; pDump
PUBLIC	?GlobalTSS@@3UTSS@@A				; GlobalTSS
PUBLIC	?DispatchStack@@3PAEA				; DispatchStack
_BSS	SEGMENT
?DispatchTSS@@3UTSS@@A DB 068H DUP (?)			; DispatchTSS
?DumpSpace@@3URegDump@@A DB 030H DUP (?)		; DumpSpace
?GlobalTSS@@3UTSS@@A DB 068H DUP (?)			; GlobalTSS
?DispatchStack@@3PAEA DB 0400H DUP (?)			; DispatchStack
_BSS	ENDS
_DATA	SEGMENT
?pDump@@3PAXA DD FLAT:?DumpSpace@@3URegDump@@A		; pDump
_DATA	ENDS
PUBLIC	??0ProcessNode@@QAE@XZ				; ProcessNode::ProcessNode
; Function compile flags: /Ogty
; File d:\my documents\projects\ooos\current\ooos\process.h
;	COMDAT ??0ProcessNode@@QAE@XZ
_TEXT	SEGMENT
??0ProcessNode@@QAE@XZ PROC NEAR			; ProcessNode::ProcessNode, COMDAT
; _this$ = ecx

; 103  : 	ProcessNode() {Next = NULL;};

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0ProcessNode@@QAE@XZ ENDP				; ProcessNode::ProcessNode
_TEXT	ENDS
PUBLIC	??0ProcessQueue@@QAE@XZ				; ProcessQueue::ProcessQueue
; Function compile flags: /Ogty
;	COMDAT ??0ProcessQueue@@QAE@XZ
_TEXT	SEGMENT
??0ProcessQueue@@QAE@XZ PROC NEAR			; ProcessQueue::ProcessQueue, COMDAT
; _this$ = ecx

; 112  : 	ProcessQueue() : Head() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0ProcessQueue@@QAE@XZ ENDP				; ProcessQueue::ProcessQueue
_TEXT	ENDS
PUBLIC	?Exception10_CPP@@YAXXZ				; Exception10_CPP
PUBLIC	??_C@_0N@KONKHPBC@Invalid?5TSS?6?$AA@		; `string'
PUBLIC	??_C@_09HPIJIFCF@ECODE?5?$CFd?6?$AA@		; `string'
PUBLIC	??_C@_0O@NAPKEEAF@CS?3EIP?5?$CFd?3?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_09LKOKBINO@FLAGS?5?$CFd?6?$AA@		; `string'
PUBLIC	??_C@_0BG@COPIHALL@Current?5task?5Seg?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0P@KNMBDACL@Register?5Dump?6?$AA@		; `string'
PUBLIC	??_C@_0CK@PEINGJCK@EAX?3?5?$CFd?5?5?5?5EBX?3?5?$CFd?5?5?5?5ECX?3?5?$CFd?5?5?5@ ; `string'
PUBLIC	??_C@_0CK@HNOEPFBO@EDI?3?5?$CFd?5?5?5?5ESI?3?5?$CFd?5?5?5?5EBP?3?5?$CFd?5?5?5@ ; `string'
PUBLIC	??_C@_0BA@LHEKDIIJ@GlobalTSS?5Dump?6?$AA@	; `string'
PUBLIC	??_C@_0N@EPGDEDFI@?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@ ; `string'
EXTRN	?printf@@YAXPBDZZ:NEAR				; printf
EXTRN	?SetColour@VideoDriver@@QAEXE@Z:NEAR		; VideoDriver::SetColour
EXTRN	?pDisp@@3PAVVideoDriver@@A:DWORD		; pDisp
;	COMDAT ??_C@_0N@KONKHPBC@Invalid?5TSS?6?$AA@
; File d:\my documents\projects\ooos\current\ooos\test.cpp
CONST	SEGMENT
??_C@_0N@KONKHPBC@Invalid?5TSS?6?$AA@ DB 'Invalid TSS', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HPIJIFCF@ECODE?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_09HPIJIFCF@ECODE?5?$CFd?6?$AA@ DB 'ECODE %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NAPKEEAF@CS?3EIP?5?$CFd?3?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0O@NAPKEEAF@CS?3EIP?5?$CFd?3?$CFd?6?$AA@ DB 'CS:EIP %d:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LKOKBINO@FLAGS?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_09LKOKBINO@FLAGS?5?$CFd?6?$AA@ DB 'FLAGS %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@COPIHALL@Current?5task?5Seg?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BG@COPIHALL@Current?5task?5Seg?3?5?$CFd?6?$AA@ DB 'Current task Se'
	DB	'g: %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KNMBDACL@Register?5Dump?6?$AA@
CONST	SEGMENT
??_C@_0P@KNMBDACL@Register?5Dump?6?$AA@ DB 'Register Dump', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PEINGJCK@EAX?3?5?$CFd?5?5?5?5EBX?3?5?$CFd?5?5?5?5ECX?3?5?$CFd?5?5?5@
CONST	SEGMENT
??_C@_0CK@PEINGJCK@EAX?3?5?$CFd?5?5?5?5EBX?3?5?$CFd?5?5?5?5ECX?3?5?$CFd?5?5?5@ DB 'E'
	DB	'AX: %d    EBX: %d    ECX: %d    EDX: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HNOEPFBO@EDI?3?5?$CFd?5?5?5?5ESI?3?5?$CFd?5?5?5?5EBP?3?5?$CFd?5?5?5@
CONST	SEGMENT
??_C@_0CK@HNOEPFBO@EDI?3?5?$CFd?5?5?5?5ESI?3?5?$CFd?5?5?5?5EBP?3?5?$CFd?5?5?5@ DB 'E'
	DB	'DI: %d    ESI: %d    EBP: %d    ESP: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LHEKDIIJ@GlobalTSS?5Dump?6?$AA@
CONST	SEGMENT
??_C@_0BA@LHEKDIIJ@GlobalTSS?5Dump?6?$AA@ DB 'GlobalTSS Dump', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EPGDEDFI@?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0N@EPGDEDFI@?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@ DB '%d %d %d %d', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?Exception10_CPP@@YAXXZ
_TEXT	SEGMENT
_Temp$ = -4
?Exception10_CPP@@YAXXZ PROC NEAR			; Exception10_CPP, COMDAT

; 57   : {

  00000	51		 push	 ecx

; 58   : //	DWORD Temp;
; 59   : 	//pDisp->ClearScreen();
; 60   : 	pDisp->SetColour(14);

  00001	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDisp@@3PAVVideoDriver@@A ; pDisp
  00007	56		 push	 esi
  00008	6a 0e		 push	 14			; 0000000eH
  0000a	e8 00 00 00 00	 call	 ?SetColour@VideoDriver@@QAEXE@Z ; VideoDriver::SetColour

; 61   : 	printf("Invalid TSS\n");

  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@KONKHPBC@Invalid?5TSS?6?$AA@
  00014	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 62   : 	printf("ECODE %d\n", DumpSpace.ECODE);

  00019	a1 20 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+32
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09HPIJIFCF@ECODE?5?$CFd?6?$AA@
  00024	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 63   : 	printf("CS:EIP %d:%d\n", DumpSpace.CS, DumpSpace.EIP);

  00029	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?DumpSpace@@3URegDump@@A+36
  0002f	8b 15 28 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A+40
  00035	51		 push	 ecx
  00036	52		 push	 edx
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@NAPKEEAF@CS?3EIP?5?$CFd?3?$CFd?6?$AA@
  0003c	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 64   : 	printf("FLAGS %d\n", DumpSpace.EFLAGS);

  00041	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+44
  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LKOKBINO@FLAGS?5?$CFd?6?$AA@
  0004c	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  00051	83 c4 20	 add	 esp, 32			; 00000020H

; 65   : 
; 66   : 	DWORD Temp;
; 67   : 	__asm STR Temp;

  00054	0f 00 4c 24 04	 str	 WORD PTR _Temp$[esp+8]

; 68   : 	printf("Current task Seg: %d\n", Temp);

  00059	8b 4c 24 04	 mov	 ecx, DWORD PTR _Temp$[esp+8]
  0005d	51		 push	 ecx
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@COPIHALL@Current?5task?5Seg?3?5?$CFd?6?$AA@
  00063	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 69   : 
; 70   : 
; 71   : 	printf("Register Dump\n");

  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@KNMBDACL@Register?5Dump?6?$AA@
  0006d	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 72   : 	printf("EAX: %d    EBX: %d    ECX: %d    EDX: %d\n", DumpSpace.EAX, DumpSpace.EBX, DumpSpace.ECX, DumpSpace.EDX);

  00072	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A+12
  00078	a1 08 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+8
  0007d	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?DumpSpace@@3URegDump@@A+4
  00083	52		 push	 edx
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A
  0008a	50		 push	 eax
  0008b	51		 push	 ecx
  0008c	52		 push	 edx
  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PEINGJCK@EAX?3?5?$CFd?5?5?5?5EBX?3?5?$CFd?5?5?5?5ECX?3?5?$CFd?5?5?5@
  00092	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 73   : 	printf("EDI: %d    ESI: %d    EBP: %d    ESP: %d\n", DumpSpace.EDI, DumpSpace.ESI, DumpSpace.EBP, DumpSpace.ESP);

  00097	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+28
  0009c	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?DumpSpace@@3URegDump@@A+24
  000a2	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A+20
  000a8	50		 push	 eax
  000a9	a1 10 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+16
  000ae	51		 push	 ecx
  000af	52		 push	 edx
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@HNOEPFBO@EDI?3?5?$CFd?5?5?5?5ESI?3?5?$CFd?5?5?5?5EBP?3?5?$CFd?5?5?5@
  000b6	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 74   : 
; 75   : 	/*for (int i = 0;i<6;++i)
; 76   : 	{
; 77   : 		printf("%d: %d %d\n", i, GDTAddress[i*2], GDTAddress[i*2+1]);
; 78   : 	}
; 79   : 
; 80   : 	for (int i = 0;i<3;++i)
; 81   : 	{
; 82   : 		printf("%d: %d %d\n", i, IDTAddress[i*2], IDTAddress[i*2+1]);
; 83   : 	}
; 84   : 
; 85   : 	for (int i = 32;i<34;++i)
; 86   : 	{
; 87   : 		printf("%d: %d %d\n", i, IDTAddress[i*2], IDTAddress[i*2+1]);
; 88   : 	}*/
; 89   : 
; 90   : 	printf("GlobalTSS Dump\n");

  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHEKDIIJ@GlobalTSS?5Dump?6?$AA@
  000c0	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  000c5	83 c4 38	 add	 esp, 56			; 00000038H
  000c8	be 5c 00 00 00	 mov	 esi, OFFSET FLAT:?GlobalTSS@@3UTSS@@A+92

; 101  : 
; 102  : 
; 103  : }

  000cd	8d 49 00	 npad	 3

; 74   : 
; 75   : 	/*for (int i = 0;i<6;++i)
; 76   : 	{
; 77   : 		printf("%d: %d %d\n", i, GDTAddress[i*2], GDTAddress[i*2+1]);
; 78   : 	}
; 79   : 
; 80   : 	for (int i = 0;i<3;++i)
; 81   : 	{
; 82   : 		printf("%d: %d %d\n", i, IDTAddress[i*2], IDTAddress[i*2+1]);
; 83   : 	}
; 84   : 
; 85   : 	for (int i = 32;i<34;++i)
; 86   : 	{
; 87   : 		printf("%d: %d %d\n", i, IDTAddress[i*2], IDTAddress[i*2+1]);
; 88   : 	}*/
; 89   : 
; 90   : 	printf("GlobalTSS Dump\n");

$L688:

; 91   : 	for (DWORD * i = reinterpret_cast<DWORD *> (&GlobalTSS) + (100/4); i>=reinterpret_cast<DWORD *> (&GlobalTSS); i-=4)
; 92   : 	{
; 93   : 		printf("%d %d %d %d\n", *i, *(i-1), *(i-2), *(i-3));

  000d0	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  000d3	8b 16		 mov	 edx, DWORD PTR [esi]
  000d5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d8	51		 push	 ecx
  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	52		 push	 edx
  000dd	50		 push	 eax
  000de	51		 push	 ecx
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@EPGDEDFI@?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@
  000e4	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  000e9	83 ee 10	 sub	 esi, 16			; 00000010H
  000ec	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  000ef	83 c4 14	 add	 esp, 20			; 00000014H
  000f2	81 fa 00 00 00
	00		 cmp	 edx, OFFSET FLAT:?GlobalTSS@@3UTSS@@A ; GlobalTSS
  000f8	73 d6		 jae	 SHORT $L688

; 101  : 
; 102  : 
; 103  : }

  000fa	8d 9b 00 00 00
	00		 npad	 6
$L693:

; 94   : 	}
; 95   : 	//printf("EAX: %d    EBX: %d    ECX: %d    EDX: %d\n", GlobalTSS.EAX, GlobalTSS.EBX, GlobalTSS.ECX, GlobalTSS.EDX);
; 96   : 	//printf("EDI: %d    ESI: %d    EBP: %d    ESP: %d\n", GlobalTSS.EDI, GlobalTSS.ESI, GlobalTSS.EBP, GlobalTSS.ESP);
; 97   : 	//printf("CS: %d     SS: %d     DS: %d     ES: %d\n", GlobalTSS.EDI, GlobalTSS.ESI, GlobalTSS.EBP, GlobalTSS.ESP);
; 98   : 
; 99   : 
; 100  : 	while(1);

  00100	eb fe		 jmp	 SHORT $L693
?Exception10_CPP@@YAXXZ ENDP				; Exception10_CPP
_TEXT	ENDS
PUBLIC	?Exception13_CPP@@YAXXZ				; Exception13_CPP
PUBLIC	??_C@_0BK@DEBEJCDJ@General?5Protection?5Fault?6?$AA@ ; `string'
PUBLIC	??_C@_0L@BECKEBJP@?$CFd?3?5?$CFd?5?$CFd?6?$AA@	; `string'
EXTRN	?GDTAddress@@3PAKA:DWORD			; GDTAddress
;	COMDAT ??_C@_0BK@DEBEJCDJ@General?5Protection?5Fault?6?$AA@
CONST	SEGMENT
??_C@_0BK@DEBEJCDJ@General?5Protection?5Fault?6?$AA@ DB 'General Protecti'
	DB	'on Fault', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BECKEBJP@?$CFd?3?5?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0L@BECKEBJP@?$CFd?3?5?$CFd?5?$CFd?6?$AA@ DB '%d: %d %d', 0aH, 00H ; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?Exception13_CPP@@YAXXZ
_TEXT	SEGMENT
?Exception13_CPP@@YAXXZ PROC NEAR			; Exception13_CPP, COMDAT

; 107  : //	DWORD Temp;
; 108  : 	//pDisp->ClearScreen();
; 109  : 	pDisp->SetColour(14);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDisp@@3PAVVideoDriver@@A ; pDisp
  00006	56		 push	 esi
  00007	6a 0e		 push	 14			; 0000000eH
  00009	e8 00 00 00 00	 call	 ?SetColour@VideoDriver@@QAEXE@Z ; VideoDriver::SetColour

; 110  : 	printf("General Protection Fault\n");

  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DEBEJCDJ@General?5Protection?5Fault?6?$AA@
  00013	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 111  : 	printf("ECODE %d\n", DumpSpace.ECODE);

  00018	a1 20 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+32
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09HPIJIFCF@ECODE?5?$CFd?6?$AA@
  00023	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 112  : 	printf("CS:EIP %d:%d\n", DumpSpace.CS, DumpSpace.EIP);

  00028	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?DumpSpace@@3URegDump@@A+36
  0002e	8b 15 28 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A+40
  00034	51		 push	 ecx
  00035	52		 push	 edx
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@NAPKEEAF@CS?3EIP?5?$CFd?3?$CFd?6?$AA@
  0003b	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 113  : 	printf("FLAGS %d\n", DumpSpace.EFLAGS);

  00040	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+44
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LKOKBINO@FLAGS?5?$CFd?6?$AA@
  0004b	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 114  : 
; 115  : 	printf("Register Dump\n");

  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@KNMBDACL@Register?5Dump?6?$AA@
  00055	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 116  : 	printf("EAX: %d    EBX: %d    ECX: %d    EDX: %d\n", DumpSpace.EAX, DumpSpace.EBX, DumpSpace.ECX, DumpSpace.EDX);

  0005a	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?DumpSpace@@3URegDump@@A+12
  00060	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A+8
  00066	a1 04 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+4
  0006b	51		 push	 ecx
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DumpSpace@@3URegDump@@A
  00072	52		 push	 edx
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PEINGJCK@EAX?3?5?$CFd?5?5?5?5EBX?3?5?$CFd?5?5?5?5ECX?3?5?$CFd?5?5?5@
  0007a	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 117  : 	printf("EDI: %d    ESI: %d    EBP: %d    ESP: %d\n", DumpSpace.EDI, DumpSpace.ESI, DumpSpace.EBP, DumpSpace.ESP);

  0007f	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A+28
  00085	a1 18 00 00 00	 mov	 eax, DWORD PTR ?DumpSpace@@3URegDump@@A+24
  0008a	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?DumpSpace@@3URegDump@@A+20
  00090	52		 push	 edx
  00091	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?DumpSpace@@3URegDump@@A+16
  00097	50		 push	 eax
  00098	51		 push	 ecx
  00099	52		 push	 edx
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@HNOEPFBO@EDI?3?5?$CFd?5?5?5?5ESI?3?5?$CFd?5?5?5?5EBP?3?5?$CFd?5?5?5@
  0009f	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  000a4	83 c4 4c	 add	 esp, 76			; 0000004cH

; 118  : 
; 119  : 	for (int i = 0;i<4;++i)

  000a7	33 f6		 xor	 esi, esi

; 131  : 
; 132  : 
; 133  : }

  000a9	8d a4 24 00 00
	00 00		 npad	 7

; 118  : 
; 119  : 	for (int i = 0;i<4;++i)

$L699:
  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?GDTAddress@@3PAKA ; GDTAddress

; 120  : 	{
; 121  : 		printf("%d: %d %d\n", i, GDTAddress[i*2], GDTAddress[i*2+1]);

  000b5	8b 4c f0 04	 mov	 ecx, DWORD PTR [eax+esi*8+4]
  000b9	8b 14 f0	 mov	 edx, DWORD PTR [eax+esi*8]
  000bc	51		 push	 ecx
  000bd	52		 push	 edx
  000be	56		 push	 esi
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@BECKEBJP@?$CFd?3?5?$CFd?5?$CFd?6?$AA@
  000c4	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
  000cc	46		 inc	 esi
  000cd	83 fe 04	 cmp	 esi, 4
  000d0	7c de		 jl	 SHORT $L699

; 122  : 	}
; 123  : 	printf("GlobalTSS Dump\n");

  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHEKDIIJ@GlobalTSS?5Dump?6?$AA@
  000d7	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  000dc	83 c4 04	 add	 esp, 4
  000df	be 5c 00 00 00	 mov	 esi, OFFSET FLAT:?GlobalTSS@@3UTSS@@A+92
$L706:

; 124  : 	for (DWORD * i = reinterpret_cast<DWORD *> (&GlobalTSS) + (100/4); i>=reinterpret_cast<DWORD *> (&GlobalTSS); i-=4)
; 125  : 	{
; 126  : 		printf("%d %d %d %d\n", *i, *(i-1), *(i-2), *(i-3));

  000e4	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  000e7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e9	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000ec	50		 push	 eax
  000ed	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000f0	51		 push	 ecx
  000f1	52		 push	 edx
  000f2	50		 push	 eax
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@EPGDEDFI@?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@
  000f8	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  000fd	83 ee 10	 sub	 esi, 16			; 00000010H
  00100	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00103	83 c4 14	 add	 esp, 20			; 00000014H
  00106	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET FLAT:?GlobalTSS@@3UTSS@@A ; GlobalTSS
  0010c	73 d6		 jae	 SHORT $L706

; 131  : 
; 132  : 
; 133  : }

  0010e	8b ff		 npad	 2
$L710:

; 127  : 	}
; 128  : 
; 129  : 
; 130  : 	while(1);

  00110	eb fe		 jmp	 SHORT $L710
?Exception13_CPP@@YAXXZ ENDP				; Exception13_CPP
_TEXT	ENDS
PUBLIC	?KernelEntry@@YAXXZ				; KernelEntry
PUBLIC	??_C@_1EA@PCALOENF@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAs?$AAe?$AAd?$AA?6@ ; `string'
PUBLIC	??_C@_1CE@LAAGDDIB@?$AAC?$AAa?$AAb?$AAo?$AAo?$AAs?$AAe?$AA?5?$AAv?$AA0?$AA?4?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FC@OADJIDMP@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAE?$AAx?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FA@KFBANILN@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAT?$AAS?$AAS?$AA?5@ ; `string'
PUBLIC	??_C@_1FC@HJFAKFNI@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAI?$AAn?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1EC@KNNFMMNH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAP?$AAI?$AAC?$AA?8?$AAs?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1DC@DEPIFANH@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@ ; `string'
PUBLIC	??_C@_1DC@DOGCHMEA@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAd?$AAl?$AAe?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@ ; `string'
PUBLIC	??_C@_06IPGPIAII@?$CFd?5?$CFd?6?$AA@		; `string'
PUBLIC	??_C@_1DC@HHBJAEIG@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAr?$AAm?$AAi?$AAn?$AAa@ ; `string'
PUBLIC	??_C@_0BL@NFNAADMG@That?5is?5bad?0?5System?5Halted?$AA@ ; `string'
EXTRN	??0VideoDriver@@QAE@XZ:NEAR			; VideoDriver::VideoDriver
EXTRN	?WriteString@VideoDriver@@QAEXPA_W@Z:NEAR	; VideoDriver::WriteString
EXTRN	?ClearScreen@VideoDriver@@QAEXXZ:NEAR		; VideoDriver::ClearScreen
EXTRN	?RawISR@KeyboardDriver@@SAXXZ:NEAR		; KeyboardDriver::RawISR
EXTRN	?RawISR@TimerDriver@@SAXXZ:NEAR			; TimerDriver::RawISR
EXTRN	?Pop_Front@ProcessQueue@@QAEPAVProcessNode@@XZ:NEAR ; ProcessQueue::Pop_Front
EXTRN	?CreateProcess@@YAHPAVProcess@@@Z:NEAR		; CreateProcess
EXTRN	??0Init@@QAE@PAX0@Z:NEAR			; Init::Init
EXTRN	??0Idle@@QAE@PAX0@Z:NEAR			; Idle::Idle
EXTRN	?CurrentProcess@@3PAVProcessNode@@A:DWORD	; CurrentProcess
EXTRN	?ActiveProcesses@@3PAVProcessQueue@@A:DWORD	; ActiveProcesses
EXTRN	?ReadyProcesses@@3PAVProcessQueue@@A:DWORD	; ReadyProcesses
EXTRN	?IDTAddress@@3PAKA:DWORD			; IDTAddress
EXTRN	??0Kernel@@QAE@PAX0@Z:NEAR			; Kernel::Kernel
EXTRN	?Exception0@@YAXXZ:NEAR				; Exception0
EXTRN	?Exception1@@YAXXZ:NEAR				; Exception1
EXTRN	?Exception2@@YAXXZ:NEAR				; Exception2
EXTRN	?Exception3@@YAXXZ:NEAR				; Exception3
EXTRN	?Exception4@@YAXXZ:NEAR				; Exception4
EXTRN	?Exception5@@YAXXZ:NEAR				; Exception5
EXTRN	?Exception6@@YAXXZ:NEAR				; Exception6
EXTRN	?Exception7@@YAXXZ:NEAR				; Exception7
EXTRN	?Exception8@@YAXXZ:NEAR				; Exception8
EXTRN	?Exception9@@YAXXZ:NEAR				; Exception9
EXTRN	?Exception10@@YAXXZ:NEAR			; Exception10
EXTRN	?Exception11@@YAXXZ:NEAR			; Exception11
EXTRN	?Exception12@@YAXXZ:NEAR			; Exception12
EXTRN	?Exception13@@YAXXZ:NEAR			; Exception13
EXTRN	?Exception14@@YAXXZ:NEAR			; Exception14
;	COMDAT ??_C@_1EA@PCALOENF@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAs?$AAe?$AAd?$AA?6@
CONST	SEGMENT
??_C@_1EA@PCALOENF@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAs?$AAe?$AAd?$AA?6@ DB 'D'
	DB	00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H
	DB	' ', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'd', 00H, 0aH, 00H
	DB	'W', 00H, 'e', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'e'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@LAAGDDIB@?$AAC?$AAa?$AAb?$AAo?$AAo?$AAs?$AAe?$AA?5?$AAv?$AA0?$AA?4?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@LAAGDDIB@?$AAC?$AAa?$AAb?$AAo?$AAo?$AAs?$AAe?$AA?5?$AAv?$AA0?$AA?4?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'a', 00H, 'b', 00H, 'o', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	' ', 00H, 'v', 00H, '0', 00H, '.', 00H, '0', 00H, '.', 00H, '0'
	DB	00H, '.', 00H, '1', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@OADJIDMP@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAE?$AAx?$AAc?$AAe@
CONST	SEGMENT
??_C@_1FC@OADJIDMP@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAE?$AAx?$AAc?$AAe@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'u', 00H, 'p', 00H, ' ', 00H, 'I', 00H, 'D', 00H, 'T'
	DB	00H, ' ', 00H, '(', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'H'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, ')', 00H, ' ', 00H, '.', 00H, '.', 00H, '.', 00H, ' '
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@ DB 'D', 00H, 'o', 00H
	DB	'n', 00H, 'e', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KFBANILN@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAT?$AAS?$AAS?$AA?5@
CONST	SEGMENT
??_C@_1FA@KFBANILN@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAT?$AAS?$AAS?$AA?5@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a'
	DB	00H, 'l', 00H, ' ', 00H, 'T', 00H, 'S', 00H, 'S', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'a'
	DB	00H, 't', 00H, 'c', 00H, 'h', 00H, ' ', 00H, 'T', 00H, 'S', 00H
	DB	'S', 00H, ' ', 00H, '.', 00H, '.', 00H, '.', 00H, ' ', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@HJFAKFNI@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAI?$AAn?$AAt?$AAe@
CONST	SEGMENT
??_C@_1FC@HJFAKFNI@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAI?$AAn?$AAt?$AAe@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'u', 00H, 'p', 00H, ' ', 00H, 'I', 00H, 'D', 00H, 'T'
	DB	00H, ' ', 00H, '(', 00H, 'I', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'r', 00H, 'u', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'H'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, ')', 00H, ' ', 00H, '.', 00H, '.', 00H, '.', 00H, ' '
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@KNNFMMNH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAP?$AAI?$AAC?$AA?8?$AAs?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAn?$AAt@
CONST	SEGMENT
??_C@_1EC@KNNFMMNH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAP?$AAI?$AAC?$AA?8?$AAs?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAn?$AAt@ DB 'E'
	DB	00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'P', 00H, 'I', 00H, 'C', 00H, '''', 00H, 's', 00H, ' ', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'r', 00H, 'u', 00H, 'p', 00H, 't', 00H, 's'
	DB	00H, ' ', 00H, '.', 00H, '.', 00H, '.', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@DEPIFANH@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@
CONST	SEGMENT
??_C@_1DC@DEPIFANH@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@ DB 'C'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, ' '
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, '.', 00H, '.', 00H, '.', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@DOGCHMEA@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAd?$AAl?$AAe?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@
CONST	SEGMENT
??_C@_1DC@DOGCHMEA@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAd?$AAl?$AAe?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@ DB 'C'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'I', 00H, 'd', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, '.', 00H, '.', 00H, '.', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPGPIAII@?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_06IPGPIAII@?$CFd?5?$CFd?6?$AA@ DB '%d %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHBJAEIG@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAr?$AAm?$AAi?$AAn?$AAa@
CONST	SEGMENT
??_C@_1DC@HHBJAEIG@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAr?$AAm?$AAi?$AAn?$AAa@ DB 'I'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'P', 00H, 'r', 00H
	DB	'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, 'T'
	DB	00H, 'e', 00H, 'r', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NFNAADMG@That?5is?5bad?0?5System?5Halted?$AA@
CONST	SEGMENT
??_C@_0BL@NFNAADMG@That?5is?5bad?0?5System?5Halted?$AA@ DB 'That is bad, '
	DB	'System Halted', 00H				; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?KernelEntry@@YAXXZ
_TEXT	SEGMENT
_i_VideoDriver$ = -3464
_ker$ = -3456
_InitProcess$ = -2304
_IdleProcess$ = -1152
?KernelEntry@@YAXXZ PROC NEAR				; KernelEntry, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 88 0d 00
	00		 sub	 esp, 3464		; 00000d88H
  0000c	56		 push	 esi
  0000d	57		 push	 edi

; 147  : 	// Display start up messages
; 148  : 	VideoDriver i_VideoDriver;

  0000e	8d 4c 24 08	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3472]
  00012	e8 00 00 00 00	 call	 ??0VideoDriver@@QAE@XZ	; VideoDriver::VideoDriver

; 149  : 	pDisp = &i_VideoDriver;

  00017	8d 44 24 08	 lea	 eax, DWORD PTR _i_VideoDriver$[esp+3472]

; 150  : 	i_VideoDriver.ClearScreen();

  0001b	8d 4c 24 08	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3472]
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?pDisp@@3PAVVideoDriver@@A, eax ; pDisp
  00024	e8 00 00 00 00	 call	 ?ClearScreen@VideoDriver@@QAEXXZ ; VideoDriver::ClearScreen

; 151  : 	i_VideoDriver.WriteString(L"Display Initialised\nWelcome to ");

  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1EA@PCALOENF@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAs?$AAe?$AAd?$AA?6@
  0002e	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00032	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 152  : 	i_VideoDriver.SetColour(9);

  00037	6a 09		 push	 9
  00039	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  0003d	e8 00 00 00 00	 call	 ?SetColour@VideoDriver@@QAEXE@Z ; VideoDriver::SetColour

; 153  : 	i_VideoDriver.WriteString(L"Caboose v0.0.0.1\n");

  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CE@LAAGDDIB@?$AAC?$AAa?$AAb?$AAo?$AAo?$AAs?$AAe?$AA?5?$AAv?$AA0?$AA?4?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?6?$AA?$AA@
  00047	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  0004b	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 154  : 	i_VideoDriver.SetColour(15);

  00050	6a 0f		 push	 15			; 0000000fH
  00052	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00056	e8 00 00 00 00	 call	 ?SetColour@VideoDriver@@QAEXE@Z ; VideoDriver::SetColour

; 155  : 
; 156  : 	Kernel ker(reinterpret_cast<void *> (0xA10000),reinterpret_cast<void *> (0xA11000));

  0005b	68 00 10 a1 00	 push	 10555392		; 00a11000H
  00060	68 00 00 a1 00	 push	 10551296		; 00a10000H
  00065	8d 4c 24 18	 lea	 ecx, DWORD PTR _ker$[esp+3480]
  00069	e8 00 00 00 00	 call	 ??0Kernel@@QAE@PAX0@Z	; Kernel::Kernel

; 157  : 	CurrentProcess = &KNode;
; 158  : 	CurrentProcess->Proc = &ker;

  0006e	8d 4c 24 10	 lea	 ecx, DWORD PTR _ker$[esp+3472]
  00072	89 0d 04 00 00
	00		 mov	 DWORD PTR ?KNode@@3VProcessNode@@A+4, ecx

; 159  : 	CurrentProcess->Next = NULL;

  00078	33 f6		 xor	 esi, esi

; 160  : 
; 161  : 	i_VideoDriver.WriteString(L"Setting up IDT (Exception Handlers) ... ");

  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1FC@OADJIDMP@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAE?$AAx?$AAc?$AAe@
  0007f	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00083	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentProcess@@3PAVProcessNode@@A, OFFSET FLAT:?KNode@@3VProcessNode@@A ; CurrentProcess, KNode
  0008d	89 35 00 00 00
	00		 mov	 DWORD PTR ?KNode@@3VProcessNode@@A, esi
  00093	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 162  : 	// set up IRQ1 (Keyboard) Interrupt Gate
; 163  : 	IDTAddress[0x00 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception0) & 0xFFFF0000);

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  0009d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception0@@YAXXZ ; Exception0
  000a2	81 e2 00 8e ff
	ff		 and	 edx, -29184		; ffff8e00H
  000a8	81 ca 00 8e 00
	00		 or	 edx, 36352		; 00008e00H
  000ae	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 	IDTAddress[0x00 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception0) & 0x0000FFFF);

  000b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  000b7	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception0@@YAXXZ ; Exception0
  000bc	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000c2	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  000c8	89 0a		 mov	 DWORD PTR [edx], ecx

; 165  : 	IDTAddress[0x01 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception1) & 0xFFFF0000);

  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  000d0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception1@@YAXXZ ; Exception1
  000d5	25 00 8e ff ff	 and	 eax, -29184		; ffff8e00H
  000da	0d 00 8e 00 00	 or	 eax, 36352		; 00008e00H
  000df	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 166  : 	IDTAddress[0x01 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception1) & 0x0000FFFF);

  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  000e7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception1@@YAXXZ ; Exception1
  000ec	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  000f2	81 ca 00 00 08
	00		 or	 edx, 524288		; 00080000H
  000f8	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 167  : 	IDTAddress[0x02 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception2) & 0xFFFF0000);

  000fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00101	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception2@@YAXXZ ; Exception2
  00106	81 e1 00 8e ff
	ff		 and	 ecx, -29184		; ffff8e00H
  0010c	81 c9 00 8e 00
	00		 or	 ecx, 36352		; 00008e00H
  00112	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 168  : 	IDTAddress[0x02 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception2) & 0x0000FFFF);

  00115	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  0011b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception2@@YAXXZ ; Exception2
  00120	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00125	0d 00 00 08 00	 or	 eax, 524288		; 00080000H
  0012a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 169  : 	IDTAddress[0x03 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception3) & 0xFFFF0000);

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00132	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception3@@YAXXZ ; Exception3
  00137	81 e2 00 8e ff
	ff		 and	 edx, -29184		; ffff8e00H
  0013d	81 ca 00 8e 00
	00		 or	 edx, 36352		; 00008e00H
  00143	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 170  : 	IDTAddress[0x03 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception3) & 0x0000FFFF);

  00146	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  0014c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception3@@YAXXZ ; Exception3
  00151	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00157	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  0015d	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 171  : 	IDTAddress[0x04 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception4) & 0xFFFF0000);

  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00166	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception4@@YAXXZ ; Exception4
  0016b	25 00 8e ff ff	 and	 eax, -29184		; ffff8e00H
  00170	0d 00 8e 00 00	 or	 eax, 36352		; 00008e00H

; 172  : 	IDTAddress[0x04 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception4) & 0x0000FFFF);

  00175	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception4@@YAXXZ ; Exception4
  0017a	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00180	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00188	81 ca 00 00 08
	00		 or	 edx, 524288		; 00080000H
  0018e	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 173  : 	IDTAddress[0x05 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception5) & 0xFFFF0000);

  00191	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00197	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception5@@YAXXZ ; Exception5
  0019c	81 e1 00 8e ff
	ff		 and	 ecx, -29184		; ffff8e00H
  001a2	81 c9 00 8e 00
	00		 or	 ecx, 36352		; 00008e00H
  001a8	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 174  : 	IDTAddress[0x05 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception5) & 0x0000FFFF);

  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  001b1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception5@@YAXXZ ; Exception5
  001b6	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001bb	0d 00 00 08 00	 or	 eax, 524288		; 00080000H
  001c0	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 175  : 	IDTAddress[0x06 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception6) & 0xFFFF0000);

  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  001c8	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception6@@YAXXZ ; Exception6
  001cd	81 e2 00 8e ff
	ff		 and	 edx, -29184		; ffff8e00H
  001d3	81 ca 00 8e 00
	00		 or	 edx, 36352		; 00008e00H
  001d9	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 176  : 	IDTAddress[0x06 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception6) & 0x0000FFFF);

  001dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception6@@YAXXZ ; Exception6
  001e7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001ed	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  001f3	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 177  : 	IDTAddress[0x07 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception7) & 0xFFFF0000);

  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  001fc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception7@@YAXXZ ; Exception7
  00201	25 00 8e ff ff	 and	 eax, -29184		; ffff8e00H
  00206	0d 00 8e 00 00	 or	 eax, 36352		; 00008e00H
  0020b	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 178  : 	IDTAddress[0x07 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception7) & 0x0000FFFF);

  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00213	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception7@@YAXXZ ; Exception7
  00218	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0021e	81 ca 00 00 08
	00		 or	 edx, 524288		; 00080000H
  00224	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 179  : 	IDTAddress[0x08 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception8) & 0xFFFF0000);

  00227	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  0022d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception8@@YAXXZ ; Exception8
  00232	81 e1 00 8e ff
	ff		 and	 ecx, -29184		; ffff8e00H
  00238	81 c9 00 8e 00
	00		 or	 ecx, 36352		; 00008e00H
  0023e	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 180  : 	IDTAddress[0x08 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception8) & 0x0000FFFF);

  00241	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00247	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception8@@YAXXZ ; Exception8
  0024c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00251	0d 00 00 08 00	 or	 eax, 524288		; 00080000H
  00256	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 181  : 	IDTAddress[0x09 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception9) & 0xFFFF0000);

  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  0025e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception9@@YAXXZ ; Exception9
  00263	81 e2 00 8e ff
	ff		 and	 edx, -29184		; ffff8e00H
  00269	81 ca 00 8e 00
	00		 or	 edx, 36352		; 00008e00H
  0026f	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 182  : 	IDTAddress[0x09 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception9) & 0x0000FFFF);

  00272	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00278	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception9@@YAXXZ ; Exception9
  0027d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00283	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  00289	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 183  : 	IDTAddress[0x0A * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception10) & 0xFFFF0000);

  0028c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00292	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception10@@YAXXZ ; Exception10
  00297	25 00 8e ff ff	 and	 eax, -29184		; ffff8e00H
  0029c	0d 00 8e 00 00	 or	 eax, 36352		; 00008e00H
  002a1	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 184  : 	IDTAddress[0x0A * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception10) & 0x0000FFFF);

  002a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  002a9	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception10@@YAXXZ ; Exception10
  002ae	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  002b4	81 ca 00 00 08
	00		 or	 edx, 524288		; 00080000H
  002ba	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 185  : 	IDTAddress[0x0B * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception11) & 0xFFFF0000);

  002bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  002c3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception11@@YAXXZ ; Exception11
  002c8	81 e1 00 8e ff
	ff		 and	 ecx, -29184		; ffff8e00H
  002ce	81 c9 00 8e 00
	00		 or	 ecx, 36352		; 00008e00H
  002d4	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 186  : 	IDTAddress[0x0B * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception11) & 0x0000FFFF);

  002d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  002dd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception11@@YAXXZ ; Exception11
  002e2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  002e7	0d 00 00 08 00	 or	 eax, 524288		; 00080000H
  002ec	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 187  : 	IDTAddress[0x0C * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception12) & 0xFFFF0000);

  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  002f4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception12@@YAXXZ ; Exception12
  002f9	81 e2 00 8e ff
	ff		 and	 edx, -29184		; ffff8e00H
  002ff	81 ca 00 8e 00
	00		 or	 edx, 36352		; 00008e00H

; 188  : 	IDTAddress[0x0C * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception12) & 0x0000FFFF);

  00305	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception12@@YAXXZ ; Exception12
  0030a	89 50 64	 mov	 DWORD PTR [eax+100], edx
  0030d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00313	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00319	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  0031f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 189  : 	IDTAddress[0x0D * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception13) & 0xFFFF0000);

  00322	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00328	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception13@@YAXXZ ; Exception13
  0032d	25 00 8e ff ff	 and	 eax, -29184		; ffff8e00H
  00332	0d 00 8e 00 00	 or	 eax, 36352		; 00008e00H
  00337	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 190  : 	IDTAddress[0x0D * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception13) & 0x0000FFFF);

  0033a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  0033f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?Exception13@@YAXXZ ; Exception13
  00344	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0034a	81 ca 00 00 08
	00		 or	 edx, 524288		; 00080000H
  00350	89 50 68	 mov	 DWORD PTR [eax+104], edx

; 191  : 	IDTAddress[0x0E * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception14) & 0xFFFF0000);

  00353	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00359	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?Exception14@@YAXXZ ; Exception14
  0035e	81 e1 00 8e ff
	ff		 and	 ecx, -29184		; ffff8e00H
  00364	81 c9 00 8e 00
	00		 or	 ecx, 36352		; 00008e00H
  0036a	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 192  : 	IDTAddress[0x0E * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception14) & 0x0000FFFF);

  0036d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00373	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?Exception14@@YAXXZ ; Exception14
  00378	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0037d	0d 00 00 08 00	 or	 eax, 524288		; 00080000H
  00382	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 193  : 	/*IDTAddress[0x0F * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 194  : 	IDTAddress[0x0F * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 195  : 	IDTAddress[0x10 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 196  : 	IDTAddress[0x10 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 197  : 	IDTAddress[0x11 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 198  : 	IDTAddress[0x11 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 199  : 	IDTAddress[0x12 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 200  : 	IDTAddress[0x12 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 201  : 	IDTAddress[0x13 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 202  : 	IDTAddress[0x13 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 203  : 	IDTAddress[0x14 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 204  : 	IDTAddress[0x14 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 205  : 	IDTAddress[0x15 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 206  : 	IDTAddress[0x15 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 207  : 	IDTAddress[0x16 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 208  : 	IDTAddress[0x16 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 209  : 	IDTAddress[0x17 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 210  : 	IDTAddress[0x17 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 211  : 	IDTAddress[0x18 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 212  : 	IDTAddress[0x18 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 213  : 	IDTAddress[0x19 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 214  : 	IDTAddress[0x19 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 215  : 	IDTAddress[0x1A * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 216  : 	IDTAddress[0x1A * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 217  : 	IDTAddress[0x1B * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 218  : 	IDTAddress[0x1B * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 219  : 	IDTAddress[0x1C * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 220  : 	IDTAddress[0x1C * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 221  : 	IDTAddress[0x1D * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 222  : 	IDTAddress[0x1D * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 223  : 	IDTAddress[0x1E * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 224  : 	IDTAddress[0x1E * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 225  : 	IDTAddress[0x1F * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (Exception) & 0xFFFF0000);
; 226  : 	IDTAddress[0x1F * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (Exception) & 0x0000FFFF);
; 227  : 	*/
; 228  : 	i_VideoDriver.WriteString(L"Done\n");

  00385	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
  0038a	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  0038e	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 229  : 	
; 230  : 
; 231  : 	// Set up Initialiser Task bits & Bobs
; 232  : 	i_VideoDriver.WriteString(L"Setting Initial TSS & Dispatch TSS ... ");

  00393	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1FA@KFBANILN@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAT?$AAS?$AAS?$AA?5@
  00398	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  0039c	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 233  : 	//printf("\n%d\n", reinterpret_cast<const unsigned long> (&GlobalTSS));
; 234  : 	GDTAddress[6] = ((reinterpret_cast<const unsigned long> (&GlobalTSS) & 0xFFFF) << 16 | 0x68);

  003a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?GDTAddress@@3PAKA ; GDTAddress
  003a6	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?GlobalTSS@@3UTSS@@A ; GlobalTSS
  003ab	c1 e2 10	 shl	 edx, 16			; 00000010H
  003ae	83 ca 68	 or	 edx, 104		; 00000068H
  003b1	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 235  : 	GDTAddress[7] = ((reinterpret_cast<const unsigned long> (&GlobalTSS) & 0xFF000000) | (reinterpret_cast<const unsigned long> (&GlobalTSS) & 0xFF0000) >> 16 | 0x008900);

  003b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?GDTAddress@@3PAKA ; GDTAddress
  003b9	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?GlobalTSS@@3UTSS@@A ; GlobalTSS
  003be	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  003c4	81 c9 ff ff 00
	89		 or	 ecx, -1996423169	; 8900ffffH
  003ca	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?GlobalTSS@@3UTSS@@A ; GlobalTSS
  003cf	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003d2	81 e2 00 89 00
	ff		 and	 edx, -16742144		; ff008900H
  003d8	0b ca		 or	 ecx, edx
  003da	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 236  : 	//GDTAddress[7] = ((reinterpret_cast<const unsigned long> (&GlobalTSS) & 0xFF000000) | (reinterpret_cast<const unsigned long> (&GlobalTSS) & 0xFF0000) >> 16 | 0x008B00);
; 237  : 	GlobalTSS.SS = 0x10;

  003dd	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H

; 238  : 	GlobalTSS.CS = 0x8;

  003e2	ba 08 00 00 00	 mov	 edx, 8
  003e7	66 89 0d 50 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A+80, cx
  003ee	66 89 15 4c 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A+76, dx

; 239  : 	GlobalTSS.DS = 0x10;

  003f5	66 89 0d 54 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A+84, cx

; 240  : 	GlobalTSS.ES = 0x10;

  003fc	66 89 0d 48 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A+72, cx

; 241  : 	GlobalTSS.FS = 0x10;

  00403	66 89 0d 58 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A+88, cx

; 242  : 	GlobalTSS.GS = 0x10;

  0040a	66 89 0d 5c 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A+92, cx

; 243  : 
; 244  : 	//GlobalTSS.ESP = reinterpret_cast<unsigned long> (DispatchStack) + 1023;
; 245  : 	//GlobalTSS.EIP = reinterpret_cast<unsigned long> (TimerDriver::RawISR);
; 246  : 	GlobalTSS.LDT = 0;

  00411	66 89 35 60 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A+96, si

; 247  : 	GlobalTSS.TaskLink = 0;	

  00418	66 89 35 00 00
	00 00		 mov	 WORD PTR ?GlobalTSS@@3UTSS@@A, si

; 248  : 	/*printf("GlobalTSS Dump\n");
; 249  : 	for (DWORD * i = reinterpret_cast<DWORD *> (&GlobalTSS) + (100/4); i>=reinterpret_cast<DWORD *> (&GlobalTSS); i-=4)
; 250  : 	{
; 251  : 		printf("%d %d %d %d\n", *i, *(i-1), *(i-2), *(i-3));
; 252  : 	}*/
; 253  : 
; 254  : 
; 255  : 	__asm
; 256  : 	{
; 257  : 		PUSH ax

  0041f	66 50		 push	 ax

; 258  : 		MOV ax, 0x18

  00421	66 b8 18 00	 mov	 ax, 24			; 00000018H

; 259  : 		LTR ax

  00425	0f 00 d8	 ltr	 ax

; 260  : 		POP ax

  00428	66 58		 pop	 ax

; 261  : 	};
; 262  : 	//i_VideoDriver.WriteString(L"Next\n");
; 263  : 
; 264  : 	// Seg 0x20, dispatch segment setup
; 265  : 	GDTAddress[8] = ((reinterpret_cast<const unsigned long> (&DispatchTSS) & 0xFFFF) << 16 | 0x68);

  0042a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?GDTAddress@@3PAKA ; GDTAddress
  00430	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?DispatchTSS@@3UTSS@@A ; DispatchTSS
  00435	c1 e0 10	 shl	 eax, 16			; 00000010H
  00438	83 c8 68	 or	 eax, 104		; 00000068H
  0043b	89 47 20	 mov	 DWORD PTR [edi+32], eax

; 266  : 	GDTAddress[9] = ((reinterpret_cast<const unsigned long> (&DispatchTSS) & 0xFF000000) | (reinterpret_cast<const unsigned long> (&DispatchTSS) & 0xFF0000) >> 16 | 0x008900);

  0043e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?DispatchTSS@@3UTSS@@A ; DispatchTSS
  00443	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  00448	0d ff ff 00 89	 or	 eax, -1996423169	; 8900ffffH
  0044d	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:?DispatchTSS@@3UTSS@@A ; DispatchTSS
  00452	c1 e8 10	 shr	 eax, 16			; 00000010H
  00455	81 e7 00 89 00
	ff		 and	 edi, -16742144		; ff008900H
  0045b	0b c7		 or	 eax, edi
  0045d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?GDTAddress@@3PAKA ; GDTAddress
  00463	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 267  : 	DispatchTSS.SS = 0x10;

  00466	66 89 0d 50 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A+80, cx

; 268  : 	DispatchTSS.CS = 0x8;
; 269  : 	DispatchTSS.DS = 0x10;

  0046d	66 89 0d 54 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A+84, cx

; 270  : 	DispatchTSS.ES = 0x10;

  00474	66 89 0d 48 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A+72, cx

; 271  : 	DispatchTSS.FS = 0x10;

  0047b	66 89 0d 58 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A+88, cx

; 272  : 	DispatchTSS.GS = 0x10;

  00482	66 89 0d 5c 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A+92, cx

; 273  : 
; 274  : 	DispatchTSS.ESP = reinterpret_cast<unsigned long> (DispatchStack) + 1023;
; 275  : 	DispatchTSS.EIP = reinterpret_cast<unsigned long> (TimerDriver::RawISR);
; 276  : 	DispatchTSS.LDT = 0;
; 277  : 	DispatchTSS.TaskLink = 0;
; 278  : 
; 279  : 	i_VideoDriver.WriteString(L"Done\n");

  00489	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
  0048e	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00492	66 89 15 4c 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A+76, dx
  00499	c7 05 38 00 00
	00 ff 03 00 00	 mov	 DWORD PTR ?DispatchTSS@@3UTSS@@A+56, OFFSET FLAT:?DispatchStack@@3PAEA+1023
  004a3	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?DispatchTSS@@3UTSS@@A+32, OFFSET FLAT:?RawISR@TimerDriver@@SAXXZ ; TimerDriver::RawISR
  004ad	66 89 35 60 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A+96, si
  004b4	66 89 35 00 00
	00 00		 mov	 WORD PTR ?DispatchTSS@@3UTSS@@A, si
  004bb	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 280  : 
; 281  : 	i_VideoDriver.WriteString(L"Setting up IDT (Interrupt Handlers) ... ");

  004c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1FC@HJFAKFNI@?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAu?$AAp?$AA?5?$AAI?$AAD?$AAT?$AA?5?$AA?$CI?$AAI?$AAn?$AAt?$AAe@
  004c5	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  004c9	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 282  : 
; 283  : 	// Interrupt Service Routines
; 284  : 	IDTAddress[0x21 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (KeyboardDriver::RawISR) & 0xFFFF0000); 

  004ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  004d4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?RawISR@KeyboardDriver@@SAXXZ ; KeyboardDriver::RawISR
  004d9	81 e1 00 8e ff
	ff		 and	 ecx, -29184		; ffff8e00H
  004df	81 c9 00 8e 00
	00		 or	 ecx, 36352		; 00008e00H
  004e5	89 8a 0c 01 00
	00		 mov	 DWORD PTR [edx+268], ecx

; 285  : 	IDTAddress[0x21 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (KeyboardDriver::RawISR) & 0x0000FFFF); 

  004eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  004f1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?RawISR@KeyboardDriver@@SAXXZ ; KeyboardDriver::RawISR
  004f6	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  004fb	0d 00 00 08 00	 or	 eax, 524288		; 00080000H
  00500	89 81 08 01 00
	00		 mov	 DWORD PTR [ecx+264], eax

; 286  : 	IDTAddress[0x20 * 2 + 1] = 0x00008E00 | (reinterpret_cast<const unsigned long> (TimerDriver::RawISR) & 0xFFFF0000); 

  00506	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  0050b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?RawISR@TimerDriver@@SAXXZ ; TimerDriver::RawISR
  00510	81 e2 00 8e ff
	ff		 and	 edx, -29184		; ffff8e00H
  00516	81 ca 00 8e 00
	00		 or	 edx, 36352		; 00008e00H

; 287  : 	IDTAddress[0x20 * 2] = 0x00080000 | (reinterpret_cast<const unsigned long> (TimerDriver::RawISR) & 0x0000FFFF); 

  0051c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?RawISR@TimerDriver@@SAXXZ ; TimerDriver::RawISR
  00521	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00527	89 90 04 01 00
	00		 mov	 DWORD PTR [eax+260], edx
  0052d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?IDTAddress@@3PAKA ; IDTAddress
  00533	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  00539	89 8a 00 01 00
	00		 mov	 DWORD PTR [edx+256], ecx

; 288  : 	//IDTAddress[0x20 * 2 + 1] = 0x8500;
; 289  : 	//IDTAddress[0x20 * 2] = 0x200000;
; 290  : 
; 291  : 	i_VideoDriver.WriteString(L"Done\n");

  0053f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
  00544	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00548	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 292  : 
; 293  : 
; 294  : 	i_VideoDriver.WriteString(L"Enable PIC's and interrupts ... ");

  0054d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1EC@KNNFMMNH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAP?$AAI?$AAC?$AA?8?$AAs?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAn?$AAt@
  00552	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00556	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 295  :     __asm
; 296  : 	{
; 297  : 		// ICW1
; 298  : 		MOV al, 0x11

  0055b	b0 11		 mov	 al, 17			; 00000011H

; 299  : 		OUT IO_PIC1, al

  0055d	e6 20		 out	 32, al			; 00000020H

; 300  : 		OUT IO_PIC2, al

  0055f	e6 a0		 out	 160, al			; 000000a0H

; 301  : 
; 302  : 		// ICW2
; 303  : 		MOV al, 0x20

  00561	b0 20		 mov	 al, 32			; 00000020H

; 304  : 		OUT IO_PIC1+1, al

  00563	e6 21		 out	 33, al			; 00000021H

; 305  : 
; 306  : 		MOV al, 0x28

  00565	b0 28		 mov	 al, 40			; 00000028H

; 307  : 		OUT IO_PIC2+1, al

  00567	e6 a1		 out	 161, al			; 000000a1H

; 308  : 
; 309  : 		// ICW3
; 310  : 		MOV al, 0x04

  00569	b0 04		 mov	 al, 4

; 311  : 		OUT IO_PIC1+1, al

  0056b	e6 21		 out	 33, al			; 00000021H

; 312  : 
; 313  : 		MOV al, 0x02

  0056d	b0 02		 mov	 al, 2

; 314  : 		OUT IO_PIC2+1, al

  0056f	e6 a1		 out	 161, al			; 000000a1H

; 315  : 
; 316  : 		// ICW4
; 317  : 		MOV al, 0x01

  00571	b0 01		 mov	 al, 1

; 318  : 		OUT IO_PIC1+1, al

  00573	e6 21		 out	 33, al			; 00000021H

; 319  : 		OUT IO_PIC2+1, al

  00575	e6 a1		 out	 161, al			; 000000a1H

; 320  : 
; 321  : 		// Set up the time of day counter
; 322  : 		MOV al, 0x37

  00577	b0 37		 mov	 al, 55			; 00000037H

; 323  : 		OUT IO_TMR + 4, al

  00579	e6 44		 out	 68, al			; 00000044H

; 324  : 		MOV al, 0x95

  0057b	b0 95		 mov	 al, -107		; ffffff95H

; 325  : 		OUT IO_TMR, al

  0057d	e6 40		 out	 64, al			; 00000040H

; 326  : 		MOV al, 0x2e

  0057f	b0 2e		 mov	 al, 46			; 0000002eH

; 327  : 		OUT IO_TMR, al

  00581	e6 40		 out	 64, al			; 00000040H

; 328  : 
; 329  : 		// PIC's are set up
; 330  : 		// now unmask keybd interrupt and timer interrupt
; 331  : 		MOV al, 0xFC

  00583	b0 fc		 mov	 al, -4			; fffffffcH

; 332  : 		OUT IO_PIC1 + 1, al

  00585	e6 21		 out	 33, al			; 00000021H

; 333  : 		MOV al, 0xFF

  00587	b0 ff		 mov	 al, -1

; 334  : 		OUT IO_PIC2 + 1, al

  00589	e6 a1		 out	 161, al			; 000000a1H

; 335  : 
; 336  : 		// Enable Interupts
; 337  : 		//STI
; 338  : 	}
; 339  : 	
; 340  : 	i_VideoDriver.WriteString(L"Done\n");

  0058b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
  00590	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00594	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 341  : 	/*__asm int 0x20;
; 342  : 	while(1);
; 343  : 	i_VideoDriver.WriteString(L"One Int\n");
; 344  : 	__asm int 0x20;
; 345  : 	i_VideoDriver.WriteString(L"Two Int\n");*/
; 346  : 	//while(1) printf("G");
; 347  : 
; 348  : 	/*for (int i = 0; 1 ; ++i)
; 349  : 	{
; 350  : 		i_VideoDriver.WriteHexByte(i);
; 351  : 		i_VideoDriver.WriteString(" ");
; 352  : 	}*/
; 353  : 
; 354  : 
; 355  : 	//Snake();
; 356  : 
; 357  : 	// Set up Process Queues
; 358  : 	ActiveProcesses = &pAll;
; 359  : 	ReadyProcesses = &pRdy;
; 360  : 	pAll.Head.Next = NULL;
; 361  : 	pRdy.Head.Next = NULL;
; 362  : 
; 363  : 	//Snake();
; 364  : 	//while(1);
; 365  : 	
; 366  : 	// Alloc Test
; 367  : 	i_VideoDriver.WriteString(L"Creating Init Process...");

  00599	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1DC@DEPIFANH@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@
  0059e	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  005a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ActiveProcesses@@3PAVProcessQueue@@A, OFFSET FLAT:?pAll@@3VProcessQueue@@A ; ActiveProcesses, pAll
  005ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ReadyProcesses@@3PAVProcessQueue@@A, OFFSET FLAT:?pRdy@@3VProcessQueue@@A ; ReadyProcesses, pRdy
  005b6	89 35 00 00 00
	00		 mov	 DWORD PTR ?pAll@@3VProcessQueue@@A, esi
  005bc	89 35 00 00 00
	00		 mov	 DWORD PTR ?pRdy@@3VProcessQueue@@A, esi
  005c2	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 368  : 	Init InitProcess(reinterpret_cast<void *> (0xA11000), reinterpret_cast<void *> (0xA12000));

  005c7	68 00 20 a1 00	 push	 10559488		; 00a12000H
  005cc	68 00 10 a1 00	 push	 10555392		; 00a11000H
  005d1	8d 8c 24 98 04
	00 00		 lea	 ecx, DWORD PTR _InitProcess$[esp+3480]
  005d8	e8 00 00 00 00	 call	 ??0Init@@QAE@PAX0@Z	; Init::Init

; 369  : 	CreateProcess(&InitProcess);

  005dd	8d 84 24 90 04
	00 00		 lea	 eax, DWORD PTR _InitProcess$[esp+3472]
  005e4	50		 push	 eax
  005e5	e8 00 00 00 00	 call	 ?CreateProcess@@YAHPAVProcess@@@Z ; CreateProcess
  005ea	83 c4 04	 add	 esp, 4

; 370  : 	i_VideoDriver.WriteString(L"Done\n");

  005ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
  005f2	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  005f6	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 371  : 
; 372  : 
; 373  : 
; 374  : 	i_VideoDriver.WriteString(L"Creating Idle Process...");

  005fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1DC@DOGCHMEA@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAd?$AAl?$AAe?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs@
  00600	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00604	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 375  : 	Idle IdleProcess(reinterpret_cast<void *> (0xA12000), reinterpret_cast<void *> (0xA13000));

  00609	68 00 30 a1 00	 push	 10563584		; 00a13000H
  0060e	68 00 20 a1 00	 push	 10559488		; 00a12000H
  00613	8d 8c 24 18 09
	00 00		 lea	 ecx, DWORD PTR _IdleProcess$[esp+3480]
  0061a	e8 00 00 00 00	 call	 ??0Idle@@QAE@PAX0@Z	; Idle::Idle

; 376  : 	CreateProcess(&IdleProcess);

  0061f	8d 8c 24 10 09
	00 00		 lea	 ecx, DWORD PTR _IdleProcess$[esp+3472]
  00626	51		 push	 ecx
  00627	e8 00 00 00 00	 call	 ?CreateProcess@@YAHPAVProcess@@@Z ; CreateProcess
  0062c	83 c4 04	 add	 esp, 4

; 377  : 	i_VideoDriver.WriteString(L"Done\n");

  0062f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1M@GFEGCGOG@?$AAD?$AAo?$AAn?$AAe?$AA?6?$AA?$AA@
  00634	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00638	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 378  : 
; 379  : 
; 380  : 	CurrentProcess = ReadyProcesses->Pop_Front();

  0063d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ReadyProcesses@@3PAVProcessQueue@@A ; ReadyProcesses
  00643	e8 00 00 00 00	 call	 ?Pop_Front@ProcessQueue@@QAEPAVProcessNode@@XZ ; ProcessQueue::Pop_Front
  00648	a3 00 00 00 00	 mov	 DWORD PTR ?CurrentProcess@@3PAVProcessNode@@A, eax ; CurrentProcess

; 381  : 	//CurrentProcess->Proc = &InitProcess;
; 382  : 	CurrentProcess->Next = NULL;

  0064d	89 30		 mov	 DWORD PTR [eax], esi

; 383  : 
; 384  : 	// Unset the busy flag of the first process
; 385  : 	GDTAddress[21] &= ~0x000200;

  0064f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?GDTAddress@@3PAKA ; GDTAddress
  00654	81 60 54 ff fd
	ff ff		 and	 DWORD PTR [eax+84], -513 ; fffffdffH

; 386  : 
; 387  : 
; 388  : 	printf("%d %d\n",GDTAddress[20], GDTAddress[21]);

  0065b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?GDTAddress@@3PAKA ; GDTAddress
  00660	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  00663	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00666	52		 push	 edx
  00667	50		 push	 eax
  00668	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06IPGPIAII@?$CFd?5?$CFd?6?$AA@
  0066d	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  00672	83 c4 0c	 add	 esp, 12			; 0000000cH

; 389  : 
; 390  : 	//__asm STI
; 391  : 	
; 392  : 	// Call the first task properly, rest of the 
; 393  : 	// task switches are handled by the dispatcher (Timer ISR for now)
; 394  : 
; 395  : 	// 0x50:00 = first process  (GDT[20]) /2 then << 3
; 396  : 	__asm
; 397  : 	{
; 398  : 		//STI
; 399  : 		;call [0x50:0]
; 400  : 		_emit 0x9A

  00675	9a		 DB	 -102			; ffffff9aH

; 401  : 		_emit 0x00

  00676	00		 DB	 0

; 402  : 		_emit 0x00

  00677	00		 DB	 0

; 403  : 		_emit 0x00

  00678	00		 DB	 0

; 404  : 		_emit 0x00

  00679	00		 DB	 0

; 405  : 		_emit 0x50

  0067a	50		 DB	 80			; 00000050H

; 406  : 		_emit 0x00

  0067b	00		 DB	 0

; 407  : 	};
; 408  : 
; 409  : 
; 410  : 
; 411  : 	//InitProcess.ProcessEntry(0, NULL);
; 412  : 	i_VideoDriver.WriteString(L"Init Process Terminated\n");

  0067c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1DC@HHBJAEIG@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAr?$AAm?$AAi?$AAn?$AAa@
  00681	8d 4c 24 0c	 lea	 ecx, DWORD PTR _i_VideoDriver$[esp+3476]
  00685	e8 00 00 00 00	 call	 ?WriteString@VideoDriver@@QAEXPA_W@Z ; VideoDriver::WriteString

; 413  : 	printf("That is bad, System Halted");

  0068a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@NFNAADMG@That?5is?5bad?0?5System?5Halted?$AA@
  0068f	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  00694	83 c4 04	 add	 esp, 4
$L800:

; 414  :     while(1);

  00697	eb fe		 jmp	 SHORT $L800
?KernelEntry@@YAXXZ ENDP				; KernelEntry
_TEXT	ENDS
PUBLIC	?Snake@@YAXXZ					; Snake
EXTRN	?WriteHexByte@VideoDriver@@QAEXE@Z:NEAR		; VideoDriver::WriteHexByte
EXTRN	?Ticks@TimerDriver@@2KC:DWORD			; TimerDriver::Ticks
; Function compile flags: /Ogty
;	COMDAT ?Snake@@YAXXZ
_TEXT	SEGMENT
_Seconds$ = -12
_vid$ = -8
?Snake@@YAXXZ PROC NEAR					; Snake, COMDAT

; 499  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 500  : 	VideoDriver vid;

  00005	8d 4c 24 0c	 lea	 ecx, DWORD PTR _vid$[esp+20]
  00009	e8 00 00 00 00	 call	 ??0VideoDriver@@QAE@XZ	; VideoDriver::VideoDriver

; 501  : 	//vid.ClearScreen();
; 502  : 	
; 503  : 	unsigned long OldTicks = 0;

  0000e	33 f6		 xor	 esi, esi

; 504  : 	unsigned char Seconds = 0;

  00010	32 db		 xor	 bl, bl
$L831:
  00012	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$L834:

; 505  : 	while (1)
; 506  : 	{
; 507  : 		while (OldTicks + 100 >= (TimerDriver::Ticks));

  00015	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?Ticks@TimerDriver@@2KC ; TimerDriver::Ticks
  0001b	73 f8		 jae	 SHORT $L834

; 508  : 		OldTicks = TimerDriver::Ticks;

  0001d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Ticks@TimerDriver@@2KC ; TimerDriver::Ticks

; 509  : 		if (++Seconds == 60)

  00023	fe c3		 inc	 bl
  00025	80 fb 3c	 cmp	 bl, 60			; 0000003cH
  00028	88 5c 24 08	 mov	 BYTE PTR _Seconds$[esp+20], bl
  0002c	75 06		 jne	 SHORT $L836

; 510  : 			Seconds = 0;

  0002e	32 db		 xor	 bl, bl
  00030	88 5c 24 08	 mov	 BYTE PTR _Seconds$[esp+20], bl
$L836:

; 511  : 		vid.WriteHexByte(Seconds);

  00034	8b 44 24 08	 mov	 eax, DWORD PTR _Seconds$[esp+20]
  00038	50		 push	 eax
  00039	8d 4c 24 10	 lea	 ecx, DWORD PTR _vid$[esp+24]
  0003d	e8 00 00 00 00	 call	 ?WriteHexByte@VideoDriver@@QAEXE@Z ; VideoDriver::WriteHexByte

; 512  : 
; 513  : 	}

  00042	eb ce		 jmp	 SHORT $L831
?Snake@@YAXXZ ENDP					; Snake
_TEXT	ENDS
PUBLIC	?pAll@@3VProcessQueue@@A			; pAll
PUBLIC	?pRdy@@3VProcessQueue@@A			; pRdy
PUBLIC	?KNode@@3VProcessNode@@A			; KNode
_BSS	SEGMENT
?pAll@@3VProcessQueue@@A DQ 01H DUP (?)			; pAll
?pRdy@@3VProcessQueue@@A DQ 01H DUP (?)			; pRdy
?KNode@@3VProcessNode@@A DQ 01H DUP (?)			; KNode
_BSS	ENDS
END
