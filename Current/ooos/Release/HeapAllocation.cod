; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	HeapAllocation.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_01MCMALHOG@a?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01LPLHEDKD@d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0ProcessNode@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0HeapAllocation@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1HeapAllocation@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@HeapAllocation@@QAEXIPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dealloc@HeapAllocation@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0HeapAllocation@@QAE@XZ			; HeapAllocation::HeapAllocation
; Function compile flags: /Ogty
; File d:\my documents\projects\ooos\current\ooos\heapallocation.cpp
;	COMDAT ??0HeapAllocation@@QAE@XZ
_TEXT	SEGMENT
??0HeapAllocation@@QAE@XZ PROC NEAR			; HeapAllocation::HeapAllocation, COMDAT
; _this$ = ecx

; 6    : {

  00000	8b c1		 mov	 eax, ecx

; 7    : }

  00002	c3		 ret	 0
??0HeapAllocation@@QAE@XZ ENDP				; HeapAllocation::HeapAllocation
_TEXT	ENDS
PUBLIC	??1HeapAllocation@@QAE@XZ			; HeapAllocation::~HeapAllocation
; Function compile flags: /Ogty
;	COMDAT ??1HeapAllocation@@QAE@XZ
_TEXT	SEGMENT
??1HeapAllocation@@QAE@XZ PROC NEAR			; HeapAllocation::~HeapAllocation, COMDAT
; _this$ = ecx

; 11   : }

  00000	c3		 ret	 0
??1HeapAllocation@@QAE@XZ ENDP				; HeapAllocation::~HeapAllocation
_TEXT	ENDS
PUBLIC	?Alloc@HeapAllocation@@QAEXIPAV1@@Z		; HeapAllocation::Alloc
PUBLIC	??_C@_01MCMALHOG@a?$AA@				; `string'
EXTRN	?printf@@YAXPBDZZ:NEAR				; printf
;	COMDAT ??_C@_01MCMALHOG@a?$AA@
CONST	SEGMENT
??_C@_01MCMALHOG@a?$AA@ DB 'a', 00H			; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?Alloc@HeapAllocation@@QAEXIPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_Size$ = 8
_After$ = 12
?Alloc@HeapAllocation@@QAEXIPAV1@@Z PROC NEAR		; HeapAllocation::Alloc, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 15   : 	printf("a");

  00004	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01MCMALHOG@a?$AA@
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  00011	83 c4 04	 add	 esp, 4

; 16   : 	__asm PUSHFD

  00014	9c		 pushfd

; 17   : 	__asm CLI;

  00015	fa		 cli

; 18   : 	Next = After->Next;

  00016	8b 45 0c	 mov	 eax, DWORD PTR _After$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	89 0a		 mov	 DWORD PTR [edx], ecx

; 19   : 	Prev = After;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _After$[ebp]
  00026	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 20   : 	AllocSize = Size;

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 45 08	 mov	 eax, DWORD PTR _Size$[ebp]
  0002f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 21   : 	SpaceSize = Prev->SpaceSize - AllocSize - sizeof(HeapAllocation);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0003b	2b 50 08	 sub	 edx, DWORD PTR [eax+8]
  0003e	83 ea 10	 sub	 edx, 16			; 00000010H
  00041	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 22   : 
; 23   : 	if (Next != NULL)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 06		 je	 SHORT $L542

; 24   : 		Next->Prev = this;

  0004d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$L542:

; 25   : 	
; 26   : 	Prev->Next = this;

  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	89 01		 mov	 DWORD PTR [ecx], eax

; 27   : 	Prev->SpaceSize = 0;

  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 28   : 	__asm POPFD;

  00065	9d		 popfd

; 29   : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?Alloc@HeapAllocation@@QAEXIPAV1@@Z ENDP		; HeapAllocation::Alloc
_TEXT	ENDS
PUBLIC	?Dealloc@HeapAllocation@@QAEXXZ			; HeapAllocation::Dealloc
PUBLIC	??_C@_01LPLHEDKD@d?$AA@				; `string'
;	COMDAT ??_C@_01LPLHEDKD@d?$AA@
CONST	SEGMENT
??_C@_01LPLHEDKD@d?$AA@ DB 'd', 00H			; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?Dealloc@HeapAllocation@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Dealloc@HeapAllocation@@QAEXXZ PROC NEAR		; HeapAllocation::Dealloc, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 33   : 	printf("d");

  00004	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01LPLHEDKD@d?$AA@
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf
  00011	83 c4 04	 add	 esp, 4

; 34   : 	__asm PUSHFD

  00014	9c		 pushfd

; 35   : 	__asm CLI;

  00015	fa		 cli

; 36   : 	Prev->Next = Next;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	89 11		 mov	 DWORD PTR [ecx], edx

; 37   : 	Prev->SpaceSize += AllocSize + SpaceSize + sizeof(HeapAllocation);

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00026	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00029	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002c	8d 54 02 10	 lea	 edx, DWORD PTR [edx+eax+16]
  00030	01 51 0c	 add	 DWORD PTR [ecx+12], edx

; 38   : 
; 39   : 	if (Next != NULL)

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 01		 mov	 eax, DWORD PTR [ecx]
  00038	85 c0		 test	 eax, eax
  0003a	74 06		 je	 SHORT $L548

; 40   : 		Next->Prev = Prev;

  0003c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$L548:

; 41   : 	__asm POPFD

  00042	9d		 popfd

; 42   : 	__asm STI;

  00043	fb		 sti

; 43   : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?Dealloc@HeapAllocation@@QAEXXZ ENDP			; HeapAllocation::Dealloc
_TEXT	ENDS
END
