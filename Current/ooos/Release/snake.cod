; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	snake.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0ProcessNode@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Snake@@QAE@PAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Snake@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProcessEntry@Snake@@UAEXPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7Snake@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0Snake@@QAE@PAX0@Z				; Snake::Snake
PUBLIC	?ProcessEntry@Snake@@UAEXPAPAX@Z		; Snake::ProcessEntry
PUBLIC	??_7Snake@@6B@					; Snake::`vftable'
EXTRN	??0Process@@QAE@PAX0@Z:NEAR			; Process::Process
;	COMDAT ??_7Snake@@6B@
; File d:\my documents\projects\ooos\current\ooos\snake.cpp
CONST	SEGMENT
??_7Snake@@6B@ DD FLAT:?ProcessEntry@Snake@@UAEXPAPAX@Z	; Snake::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0Snake@@QAE@PAX0@Z
_TEXT	SEGMENT
_Start$ = 8
_End$ = 12
??0Snake@@QAE@PAX0@Z PROC NEAR				; Snake::Snake, COMDAT
; _this$ = ecx

; 6    : {

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _End$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 08	 mov	 ecx, DWORD PTR _Start$[esp]
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??0Process@@QAE@PAX0@Z	; Process::Process
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7Snake@@6B@

; 7    : }

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	c2 08 00	 ret	 8
??0Snake@@QAE@PAX0@Z ENDP				; Snake::Snake
_TEXT	ENDS
PUBLIC	??1Snake@@QAE@XZ				; Snake::~Snake
EXTRN	??1Process@@QAE@XZ:NEAR				; Process::~Process
; Function compile flags: /Ogty
;	COMDAT ??1Snake@@QAE@XZ
_TEXT	SEGMENT
??1Snake@@QAE@XZ PROC NEAR				; Snake::~Snake, COMDAT
; _this$ = ecx

; 10   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7Snake@@6B@

; 11   : }

  00006	e9 00 00 00 00	 jmp	 ??1Process@@QAE@XZ	; Process::~Process
??1Snake@@QAE@XZ ENDP					; Snake::~Snake
_TEXT	ENDS
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
EXTRN	?printf@@YAXPBDZZ:NEAR				; printf
EXTRN	?SetPosition@VideoDriver@@QAEXEE@Z:NEAR		; VideoDriver::SetPosition
EXTRN	?SetPosition@VideoDriver@@QAEXVPoint@@@Z:NEAR	; VideoDriver::SetPosition
EXTRN	?GetPosition@VideoDriver@@QAE?AVPoint@@XZ:NEAR	; VideoDriver::GetPosition
EXTRN	?pDisp@@3PAVVideoDriver@@A:DWORD		; pDisp
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?ProcessEntry@Snake@@UAEXPAPAX@Z
_TEXT	SEGMENT
_OldPoint$541 = -8
_args$ = 8
?ProcessEntry@Snake@@UAEXPAPAX@Z PROC NEAR		; Snake::ProcessEntry, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 16   : 	int Temp = 0;

  00007	33 f6		 xor	 esi, esi

; 28   : }

  00009	8d a4 24 00 00
	00 00		 npad	 7

; 16   : 	int Temp = 0;

$L539:

; 17   : 	while(1) 
; 18   : 	{
; 19   : 		__asm PUSHFD

  00010	9c		 pushfd

; 20   : 		__asm CLI;

  00011	fa		 cli

; 21   : 		Point OldPoint = pDisp->GetPosition();

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDisp@@3PAVVideoDriver@@A ; pDisp
  00018	8d 45 f8	 lea	 eax, DWORD PTR _OldPoint$541[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?GetPosition@VideoDriver@@QAE?AVPoint@@XZ ; VideoDriver::GetPosition

; 22   : 		pDisp->SetPosition(70,20);

  00021	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDisp@@3PAVVideoDriver@@A ; pDisp
  00027	6a 14		 push	 20			; 00000014H
  00029	6a 46		 push	 70			; 00000046H
  0002b	e8 00 00 00 00	 call	 ?SetPosition@VideoDriver@@QAEXEE@Z ; VideoDriver::SetPosition

; 23   : 		printf("%d", Temp++);

  00030	56		 push	 esi
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  00036	e8 00 00 00 00	 call	 ?printf@@YAXPBDZZ	; printf

; 24   : 		pDisp->SetPosition(OldPoint);

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _OldPoint$541[ebp+4]
  0003e	8b 55 f8	 mov	 edx, DWORD PTR _OldPoint$541[ebp]
  00041	83 c4 08	 add	 esp, 8
  00044	51		 push	 ecx
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDisp@@3PAVVideoDriver@@A ; pDisp
  0004b	52		 push	 edx
  0004c	46		 inc	 esi
  0004d	e8 00 00 00 00	 call	 ?SetPosition@VideoDriver@@QAEXVPoint@@@Z ; VideoDriver::SetPosition

; 25   : 		__asm POPFD;

  00052	9d		 popfd

; 26   : 		//break;
; 27   : 	}

  00053	eb bb		 jmp	 SHORT $L539
?ProcessEntry@Snake@@UAEXPAPAX@Z ENDP			; Snake::ProcessEntry
_TEXT	ENDS
END
