; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	Test.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_03EOEIELCA@Boo?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _main
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	_main
PUBLIC	??_C@_03EOEIELCA@Boo?$AA@			; `string'
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??0BinaryStore@@QAE@J@Z:NEAR			; BinaryStore::BinaryStore
EXTRN	?Read@BinaryStore@@QAEPAEJ@Z:NEAR		; BinaryStore::Read
EXTRN	?Write@BinaryStore@@QAEXJPAE@Z:NEAR		; BinaryStore::Write
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__except_list:DWORD
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT rtc$IMZ
; File d:\my documents\projects\ooos\test.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
__ehfuncinfo$_main DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_03EOEIELCA@Boo?$AA@
CONST	SEGMENT
??_C@_03EOEIELCA@Boo?$AA@ DB 'Boo', 00H			; `string'
; Function compile flags: /Odt /RTCsu /ZI
CONST	ENDS
;	COMDAT _main
_TEXT	SEGMENT
tv72 = -256
$T310 = -248
$T309 = -236
_MyStore$ = -32
_Buffer$ = -20
__$EHRec$ = -12
_main	PROC NEAR					; COMDAT

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_main
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00027	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd

; 5    : 	BYTE * Buffer;
; 6    : 	BinaryStore * MyStore = new BinaryStore(10);

  00033	6a 1c		 push	 28			; 0000001cH
  00035	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T310[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR $T310[ebp], 0
  00051	74 15		 je	 SHORT $L311
  00053	6a 0a		 push	 10			; 0000000aH
  00055	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T310[ebp]
  0005b	e8 00 00 00 00	 call	 ??0BinaryStore@@QAE@J@Z	; BinaryStore::BinaryStore
  00060	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
  00066	eb 0a		 jmp	 SHORT $L312
$L311:
  00068	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv72[ebp], 0
$L312:
  00072	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00078	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T309[ebp], eax
  0007e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00085	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR $T309[ebp]
  0008b	89 4d e0	 mov	 DWORD PTR _MyStore$[ebp], ecx

; 7    : 	MyStore->Write(4, reinterpret_cast<BYTE *> ("Boo"));

  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03EOEIELCA@Boo?$AA@
  00093	6a 04		 push	 4
  00095	8b 4d e0	 mov	 ecx, DWORD PTR _MyStore$[ebp]
  00098	e8 00 00 00 00	 call	 ?Write@BinaryStore@@QAEXJPAE@Z ; BinaryStore::Write

; 8    : 	Buffer = MyStore->Read(4);

  0009d	6a 04		 push	 4
  0009f	8b 4d e0	 mov	 ecx, DWORD PTR _MyStore$[ebp]
  000a2	e8 00 00 00 00	 call	 ?Read@BinaryStore@@QAEPAEJ@Z ; BinaryStore::Read
  000a7	89 45 ec	 mov	 DWORD PTR _Buffer$[ebp], eax

; 9    : }

  000aa	33 c0		 xor	 eax, eax
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000bf	3b ec		 cmp	 ebp, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
  00000	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR $T310[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$_main:
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:__ehfuncinfo$_main
  00013	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
_main	ENDP
END
