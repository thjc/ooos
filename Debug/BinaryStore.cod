; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	BinaryStore.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??0BinaryStore@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Read@BinaryStore@@QAEPAEJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Write@BinaryStore@@QAEXJPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	??0BinaryStore@@QAE@J@Z				; BinaryStore::BinaryStore
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
;	COMDAT rtc$IMZ
; File d:\my documents\projects\ooos\binarystore.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu /ZI
rtc$TMZ	ENDS
;	COMDAT ??0BinaryStore@@QAE@J@Z
_TEXT	SEGMENT
$T321 = -212
_this$ = -8
_Size$ = 8
??0BinaryStore@@QAE@J@Z PROC NEAR			; BinaryStore::BinaryStore, COMDAT
; _this$ = ecx

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 5    : 	Start = End = Head = Tail = new BYTE[Size];

  00023	8b 45 08	 mov	 eax, DWORD PTR _Size$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T321[ebp], eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T321[ebp]
  0003e	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T321[ebp]
  0004a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0004d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00050	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T321[ebp]
  00056	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T321[ebp]
  00062	89 11		 mov	 DWORD PTR [ecx], edx

; 6    : }

  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
??0BinaryStore@@QAE@J@Z ENDP				; BinaryStore::BinaryStore
_TEXT	ENDS
PUBLIC	?Read@BinaryStore@@QAEPAEJ@Z			; BinaryStore::Read
; Function compile flags: /Odt /RTCsu /ZI
;	COMDAT ?Read@BinaryStore@@QAEPAEJ@Z
_TEXT	SEGMENT
_Temp$ = -20
_this$ = -8
_Length$ = 8
?Read@BinaryStore@@QAEPAEJ@Z PROC NEAR			; BinaryStore::Read, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 10   : 	BYTE * Temp = Head;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	89 4d ec	 mov	 DWORD PTR _Temp$[ebp], ecx

; 11   : 	Head += Length;

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00032	03 4d 08	 add	 ecx, DWORD PTR _Length$[ebp]
  00035	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00038	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 12   : 	return Temp;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR _Temp$[ebp]

; 13   : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?Read@BinaryStore@@QAEPAEJ@Z ENDP			; BinaryStore::Read
_TEXT	ENDS
PUBLIC	?Write@BinaryStore@@QAEXJPAE@Z			; BinaryStore::Write
; Function compile flags: /Odt /RTCsu /ZI
;	COMDAT ?Write@BinaryStore@@QAEXJPAE@Z
_TEXT	SEGMENT
_i$308 = -20
_this$ = -8
_Length$ = 8
_Data$ = 12
?Write@BinaryStore@@QAEXJPAE@Z PROC NEAR		; BinaryStore::Write, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 	for (int i = 0 ; i < Length; ++i)

  00023	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$308[ebp], 0
  0002a	eb 09		 jmp	 SHORT $L309
$L310:
  0002c	8b 45 ec	 mov	 eax, DWORD PTR _i$308[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 ec	 mov	 DWORD PTR _i$308[ebp], eax
$L309:
  00035	8b 45 ec	 mov	 eax, DWORD PTR _i$308[ebp]
  00038	3b 45 08	 cmp	 eax, DWORD PTR _Length$[ebp]
  0003b	7d 43		 jge	 SHORT $L307

; 18   : 	{
; 19   : 		if (Head == Start)

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00046	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00048	75 0f		 jne	 SHORT $L312

; 20   : 			Head--;

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00050	83 e9 01	 sub	 ecx, 1
  00053	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00056	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L312:

; 21   : 		++Head;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005f	83 c1 01	 add	 ecx, 1
  00062	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 22   : 		*Head = *Data;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _Data$[ebp]
  00071	8a 02		 mov	 al, BYTE PTR [edx]
  00073	88 01		 mov	 BYTE PTR [ecx], al

; 23   : 		++Data;

  00075	8b 45 0c	 mov	 eax, DWORD PTR _Data$[ebp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 45 0c	 mov	 DWORD PTR _Data$[ebp], eax

; 24   : 	}

  0007e	eb ac		 jmp	 SHORT $L310
$L307:

; 25   : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 08 00	 ret	 8
?Write@BinaryStore@@QAEXJPAE@Z ENDP			; BinaryStore::Write
_TEXT	ENDS
END
